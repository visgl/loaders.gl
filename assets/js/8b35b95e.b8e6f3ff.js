"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[1012],{7983:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>n,metadata:()=>o,toc:()=>d});var t=a(62540),s=a(43023);const n={},l="Table Loaders",o={id:"specifications/category-table",title:"Table Loaders",description:"The table category loaders supports loading tables in row-based, columnar or batched columnar formats.",source:"@site/../docs/specifications/category-table.md",sourceDirName:"specifications",slug:"/specifications/category-table",permalink:"/docs/specifications/category-table",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/specifications/category-table.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JSON-style Loaders",permalink:"/docs/specifications/category-json"},next:{title:"Image Loaders",permalink:"/docs/specifications/category-image"}},i={},d=[{value:"Table Category Loaders",id:"table-category-loaders",level:2},{value:"Data Structure",id:"data-structure",level:2},{value:"Table Types",id:"table-types",level:2},{value:"Classic Tables (Row-Major)",id:"classic-tables-row-major",level:3},{value:"Columnar Tables (Column-Major)",id:"columnar-tables-column-major",level:3},{value:"Chunked Columnar Tables (DataFrames)",id:"chunked-columnar-tables-dataframes",level:3},{value:"Table Accessors",id:"table-accessors",level:2},{value:"Apache Arrow support",id:"apache-arrow-support",level:2},{value:"The Threading Issue",id:"the-threading-issue",level:3},{value:"Handling non-typed data",id:"handling-non-typed-data",level:3},{value:"Serialized table representation",id:"serialized-table-representation",level:2}];function c(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"table-loaders",children:"Table Loaders"})}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.em,{children:"table"})," category loaders supports loading tables in ",(0,t.jsx)(r.em,{children:"row-based"}),", ",(0,t.jsx)(r.em,{children:"columnar"})," or ",(0,t.jsx)(r.em,{children:"batched columnar"})," formats."]}),"\n",(0,t.jsx)(r.h2,{id:"table-category-loaders",children:"Table Category Loaders"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Loader"}),(0,t.jsx)(r.th,{children:"Notes"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.a,{href:"/docs/modules/arrow/api-reference/arrow-loader",children:(0,t.jsx)(r.code,{children:"ArrowLoader"})})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.a,{href:"/docs/modules/csv/api-reference/csv-loader",children:(0,t.jsx)(r.code,{children:"CSVLoader"})})}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.a,{href:"/docs/modules/json/api-reference/json-loader",children:(0,t.jsx)(r.code,{children:"JSONLoader"})})}),(0,t.jsxs)(r.td,{children:["Set ",(0,t.jsx)(r.code,{children:"options.json.table"})," to ",(0,t.jsx)(r.code,{children:"true"})]})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"data-structure",children:"Data Structure"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Field"}),(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Contents"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"shape"})}),(0,t.jsx)(r.td,{children:"string union"}),(0,t.jsx)(r.td,{children:"One of the supported shape strings for tables"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"schema"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Object"})}),(0,t.jsx)(r.td,{children:"Metadata of the table, maps name of each column to its type."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"data"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"Object"})," or ",(0,t.jsx)(r.code,{children:"Array"})]}),(0,t.jsxs)(r.td,{children:["Data of the table, see ",(0,t.jsx)(r.a,{href:"#table-types",children:"table types"})]})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"table-types",children:"Table Types"}),"\n",(0,t.jsx)(r.p,{children:"loaders.gl deals with (and offers utilities to convert between) three different types of tables:"}),"\n",(0,t.jsx)(r.h3,{id:"classic-tables-row-major",children:"Classic Tables (Row-Major)"}),"\n",(0,t.jsxs)(r.p,{children:["This is the classic JavaScript table. ",(0,t.jsx)(r.code,{children:"data"})," consists of an ",(0,t.jsx)(r.code,{children:"Array"})," of ",(0,t.jsx)(r.code,{children:"Object"})," instances, each representing a row."]}),"\n",(0,t.jsx)(r.h3,{id:"columnar-tables-column-major",children:"Columnar Tables (Column-Major)"}),"\n",(0,t.jsxs)(r.p,{children:["Columnar tables are stored as one array per column. Columns that are numeric can be loaded as typed arrays which are stored in contigous memory. ",(0,t.jsx)(r.code,{children:"data"})," is an ",(0,t.jsx)(r.code,{children:"Object"})," that maps column names to an array or typed array."]}),"\n",(0,t.jsx)(r.p,{children:"Contiguous memory has tremendous benefits:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Values are adjacent in memory, the resulting cache locality can result in big performance gains"}),"\n",(0,t.jsx)(r.li,{children:"Typed arrays can of course be efficiently transferred from worker threads to main thread"}),"\n",(0,t.jsx)(r.li,{children:"Can be directly uploaded to the GPU for further processing."}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"chunked-columnar-tables-dataframes",children:"Chunked Columnar Tables (DataFrames)"}),"\n",(0,t.jsx)(r.p,{children:"A problem with columnar tables is that column arrays they can get very long, causing issues with streaming, memory allication etc. A powerful solution is to worked with chunked columnar tables, where columns is are broken into matching sequences of typed arrays."}),"\n",(0,t.jsx)(r.p,{children:"The down-side is that complexity can increase quickly. Data Frames are optimized to minimize the amount of copying/moving/reallocation of data during common operations such e.g. loading and transformations, and support zero-cost filtering through smart iterators etc."}),"\n",(0,t.jsx)(r.p,{children:"Using the Arrow API it is possible to work extremely efficiently with very large (multi-gigabyte) datasets."}),"\n",(0,t.jsx)(r.h2,{id:"table-accessors",children:"Table Accessors"}),"\n",(0,t.jsx)(r.p,{children:"loaders.gl provides a range of table accessors."}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Accessor"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"getTableLength(table: Table): number"})}),(0,t.jsx)(r.td,{children:"Returns length (number of rows) in the table"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"getTableNumCols(table: Table): number"})}),(0,t.jsx)(r.td,{children:"Returns number of columns in the table"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"getTableCell(table: Table, rowIndex: number, columnName: string): unknown"})}),(0,t.jsx)(r.td,{children:"Gets the value in a cell by column name and row index"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"getTableCellAt(table: Table, rowIndex: number, columnIndex: number): unknown"})}),(0,t.jsx)(r.td,{children:"Gets the value of a cell by column index and row index"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"getTableRowShape(table: Table): 'array-row-table' | 'object-row-table'"})}),(0,t.jsx)(r.td,{children:"Gets the shape of each table row"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"getTableColumnIndex(table: Table, columnName: string): number"})}),(0,t.jsx)(r.td,{children:"Gets the index of a named column"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"getTableColumnName(table: Table, columnIndex: number): string"})}),(0,t.jsx)(r.td,{children:"Gets the name of a column by index"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"getTableRowAsObject(table: Table, rowIndex: number, target?: unknown[], copy?: 'copy')"})}),(0,t.jsx)(r.td,{children:"Gets a row from the table. Parameters contol whether a new object is minted or reused."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"getTableRowAsArray(table: Table, rowIndex: number, target?: unknown[], copy?: 'copy'): unknown[]"})}),(0,t.jsx)(r.td,{children:"Gets a row from the table. Parameters contol whether a new array is minted or reused."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"makeArrayRowTable(table: Table): ArrayRowTable"})}),(0,t.jsx)(r.td,{children:"Copies a table into 'array-row-table' format."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"makeObjectRowTable(table: Table): ObjectRowTable"})}),(0,t.jsx)(r.td,{children:"Copies a table into 'object-row-table' format"})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"apache-arrow-support",children:"Apache Arrow support"}),"\n",(0,t.jsx)(r.p,{children:"loaders.gl has built-in support for Apache Arrow as a preferred in-memory binary columnar format."}),"\n",(0,t.jsx)(r.h3,{id:"the-threading-issue",children:"The Threading Issue"}),"\n",(0,t.jsx)(r.p,{children:"The Apache Arrow API is quite powerful, however there is a key limitation in that the Arrow Table classes do not serialize and deserialize when sending tables between threads."}),"\n",(0,t.jsx)(r.p,{children:"It is of course possible to work with the underlying IPC data structure."}),"\n",(0,t.jsx)(r.h3,{id:"handling-non-typed-data",children:"Handling non-typed data"}),"\n",(0,t.jsx)(r.p,{children:"A JavaScript table has the freedom that a column can contain any type."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"const arrowTable = makeArrowTable(table).data;\n"})}),"\n",(0,t.jsx)(r.h2,{id:"serialized-table-representation",children:"Serialized table representation"}),"\n",(0,t.jsx)(r.p,{children:"loaders.gl defines what is effectively a serialized representation of Apache Arrow schemas. These can be converted to Arrow tables with a simple transformation that is provided."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"import {makeTable} from 'apache-arrow';\n\nconst arrowTable = makeTable(...); // An arrow table\nconst table = serializeArrowTable(arrowTable); // A loaders.gl columnar table\nconst arrowTableCopy = deserializeArrowTable(table); // An arrow table\n\nconsole.log(arrowTable.compareTo(arrowTableCopy));\n"})}),"\n",(0,t.jsx)(r.p,{children:"Note: Currently the batch structure of a table is lost during serialization."})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},43023:(e,r,a)=>{a.d(r,{R:()=>l,x:()=>o});var t=a(63696);const s={},n=t.createContext(s);function l(e){const r=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(n.Provider,{value:r},e.children)}}}]);