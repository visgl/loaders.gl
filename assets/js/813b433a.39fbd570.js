"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9266],{45181:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>o});var i=t(62540),n=t(43023);const r={},s="Binary Image Utilities",d={id:"modules/images/api-reference/binary-image-api",title:"Binary Image Utilities",description:"Utilities to extract metadata such as image format (MIME type) and size (dimensions) from binary images without parsing the full image. Looks for format-specific headers in the encoded binary data (e.g. encoded JPEG or PNG images).",source:"@site/../docs/modules/images/api-reference/binary-image-api.md",sourceDirName:"modules/images/api-reference",slug:"/modules/images/api-reference/binary-image-api",permalink:"/docs/modules/images/api-reference/binary-image-api",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/images/api-reference/binary-image-api.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Image Utilities",permalink:"/docs/modules/images/api-reference/parsed-image-api"},next:{title:"Overview",permalink:"/docs/modules/json/"}},c={},o=[{value:"Usage",id:"usage",level:2},{value:"Functions",id:"functions",level:2},{value:"getBinaryImageMetadata(imageData: ArrayBuffer | DataView): object | null",id:"getbinaryimagemetadataimagedata-arraybuffer--dataview-object--null",level:3}];function l(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"binary-image-utilities",children:"Binary Image Utilities"})}),"\n",(0,i.jsx)(a.p,{children:"Utilities to extract metadata such as image format (MIME type) and size (dimensions) from binary images without parsing the full image. Looks for format-specific headers in the encoded binary data (e.g. encoded JPEG or PNG images)."}),"\n",(0,i.jsx)(a.p,{children:"The format is reported using MIME types strings. Supported binary formats and their MIME types are:"}),"\n",(0,i.jsxs)(a.table,{children:[(0,i.jsx)(a.thead,{children:(0,i.jsxs)(a.tr,{children:[(0,i.jsx)(a.th,{children:"Format"}),(0,i.jsx)(a.th,{children:"MIME Type"})]})}),(0,i.jsxs)(a.tbody,{children:[(0,i.jsxs)(a.tr,{children:[(0,i.jsx)(a.td,{children:"PNG"}),(0,i.jsx)(a.td,{children:(0,i.jsx)(a.code,{children:"image/png"})})]}),(0,i.jsxs)(a.tr,{children:[(0,i.jsx)(a.td,{children:"JPEG"}),(0,i.jsx)(a.td,{children:(0,i.jsx)(a.code,{children:"image/jpeg"})})]}),(0,i.jsxs)(a.tr,{children:[(0,i.jsx)(a.td,{children:"BMP"}),(0,i.jsx)(a.td,{children:(0,i.jsx)(a.code,{children:"image/bmp"})})]}),(0,i.jsxs)(a.tr,{children:[(0,i.jsx)(a.td,{children:"GIF"}),(0,i.jsx)(a.td,{children:(0,i.jsx)(a.code,{children:"image/gif"})})]})]})]}),"\n",(0,i.jsx)(a.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:"const response = await fetchFile(imageUrl);\nconst arrayBuffer = await response.arrayBuffer();\n\nconst metadata = getBinaryImageMetadata(arrayBuffer);\nif (medata) {\n  const {width, height, mimeType} = metadata;\n}\n"})}),"\n",(0,i.jsx)(a.h2,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(a.h3,{id:"getbinaryimagemetadataimagedata-arraybuffer--dataview-object--null",children:"getBinaryImageMetadata(imageData: ArrayBuffer | DataView): object | null"}),"\n",(0,i.jsx)(a.p,{children:"Parameters:"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"imageData"}),": Binary encoded image data."]}),"\n"]}),"\n",(0,i.jsxs)(a.p,{children:["Returns a metadata object describing the image. Returns ",(0,i.jsx)(a.code,{children:"null"})," if the binary data does not represent a known binary image format."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:"{\n  mimeType: string;\n  width: number;\n  height: number;\n}\n"})}),"\n",(0,i.jsxs)(a.p,{children:["If ",(0,i.jsx)(a.code,{children:"mimeType"})," is supplied, assumes the image is of that type. If not supplied, first attempts to auto deduce the image format (see ",(0,i.jsx)(a.code,{children:"getImageMIMEType"}),")."]})]})}function m(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},43023:(e,a,t)=>{t.d(a,{R:()=>s,x:()=>d});var i=t(63696);const n={},r=i.createContext(n);function s(e){const a=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),i.createElement(r.Provider,{value:a},e.children)}}}]);