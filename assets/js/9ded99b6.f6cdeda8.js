"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[3661],{83870:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>l});var r=n(62540),i=n(43023);const t={},s="Overview",d={id:"modules/images/README",title:"Overview",description:"The @loaders.gl/images module contains loader and writers for images that follow loaders.gl conventions and work under both node and browser.",source:"@site/../docs/modules/images/README.md",sourceDirName:"modules/images",slug:"/modules/images/",permalink:"/docs/modules/images/",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/images/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/modules/i3s/"},next:{title:"Image Utilities",permalink:"/docs/modules/images/api-reference/parsed-image-api"}},o={},l=[{value:"Installation",id:"installation",level:2},{value:"API",id:"api",level:2},{value:"Parsed Image API",id:"parsed-image-api",level:3},{value:"Binary Image API",id:"binary-image-api",level:3},{value:"Parsed Image API",id:"parsed-image-api-1",level:3},{value:"Image Types",id:"image-types",level:2}];function c(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"overview",children:"Overview"})}),"\n",(0,r.jsxs)(a.p,{children:["The ",(0,r.jsx)(a.code,{children:"@loaders.gl/images"})," module contains loader and writers for images that follow loaders.gl conventions and work under both node and browser."]}),"\n",(0,r.jsx)(a.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",children:"npm install @loaders.gl/images\nnpm install @loaders.gl/core\n"})}),"\n",(0,r.jsx)(a.h2,{id:"api",children:"API"}),"\n",(0,r.jsxs)(a.table,{children:[(0,r.jsx)(a.thead,{children:(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.th,{children:"Loader"}),(0,r.jsx)(a.th,{children:"Description"})]})}),(0,r.jsxs)(a.tbody,{children:[(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.a,{href:"/docs/modules/images/api-reference/image-loader",children:(0,r.jsx)(a.code,{children:"ImageLoader"})})}),(0,r.jsx)(a.td,{})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.a,{href:"/docs/modules/images/api-reference/image-writer",children:(0,r.jsx)(a.code,{children:"ImageWriter"})})}),(0,r.jsx)(a.td,{})]})]})]}),"\n",(0,r.jsx)(a.h3,{id:"parsed-image-api",children:"Parsed Image API"}),"\n",(0,r.jsx)(a.h3,{id:"binary-image-api",children:"Binary Image API"}),"\n",(0,r.jsxs)(a.p,{children:['A set of functions that can extract information from "unparsed" binary memory representation of certain image formats. These functions are intended to be called on raw ',(0,r.jsx)(a.code,{children:"ArrayBuffer"})," data, before the ",(0,r.jsx)(a.code,{children:"ImageLoader"})," parses it and converts it to a parsed image type."]}),"\n",(0,r.jsxs)(a.p,{children:["These functions are used internally to autodetect if image loader can be used to parse a certain ",(0,r.jsx)(a.code,{children:"ArrayBuffer"}),", but are also available to applications."]}),"\n",(0,r.jsxs)(a.p,{children:["| Function                                                                     | Description |\n| ---------------------------------------------------------------------------- | ----------- | --- |\n| ",(0,r.jsx)(a.code,{children:"isBinaryImage(imageData : ArrayBuffer [, mimeType : String]) : Boolean"}),"     |             |\n| ",(0,r.jsx)(a.code,{children:"getBinaryImageMIMEType(imageData : ArrayBuffer) : String                    | null"}),"       |     |\n| ",(0,r.jsx)(a.code,{children:"getBinaryImageSize(imageData : ArrayBuffer [, mimeType : String]) : Object"})," |             |"]}),"\n",(0,r.jsx)(a.h3,{id:"parsed-image-api-1",children:"Parsed Image API"}),"\n",(0,r.jsxs)(a.p,{children:["A set of functions to work with parsed images returned by the ",(0,r.jsx)(a.code,{children:"ImageLoader"}),"."]}),"\n",(0,r.jsxs)(a.table,{children:[(0,r.jsx)(a.thead,{children:(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.th,{children:"Function"}),(0,r.jsx)(a.th,{children:"Description"})]})}),(0,r.jsxs)(a.tbody,{children:[(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"isImageTypeSupported(type : string) : boolean"})}),(0,r.jsx)(a.td,{children:"Check if type is supported by current run-time environment"})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"getDefaultImageType() : string"})}),(0,r.jsxs)(a.td,{children:["Returns the image type selected by default ( ",(0,r.jsx)(a.code,{children:"options.image.type: 'auto'"})," in current run-time environment"]})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"isImage(image : any) : boolean"})}),(0,r.jsx)(a.td,{children:"Checks any JavaScript value to see if it is an image of a type that loaders.gl can work with"})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"getImageType(image : any) : string"})}),(0,r.jsx)(a.td,{children:"Returns the type name for this image."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:(0,r.jsx)(a.code,{children:"getImageData(image : any) : object"})}),(0,r.jsxs)(a.td,{children:["Returns an image data object with a ",(0,r.jsx)(a.code,{children:"data"})," array representing the pixels of an image"]})]})]})]}),"\n",(0,r.jsx)(a.h2,{id:"image-types",children:"Image Types"}),"\n",(0,r.jsxs)(a.p,{children:["To support image loading on older browsers and Node.js, the ",(0,r.jsx)(a.code,{children:"ImageLoader"})," can return different types, i.e. different representations of the parsed image."]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.code,{children:"ImageBitmap"})," - An ",(0,r.jsx)(a.code,{children:"ImageBitmap"}),' object represents a bitmap image that can be performantly painted to a canvas ("without undue latency"). Due to the signficant performance advantages, and the fact that ',(0,r.jsx)(a.code,{children:"ImageBitmap"})," instances can be transferred efficiently between threads, ",(0,r.jsx)(a.code,{children:"ImageBitmap"})," is the preferred parsed image representation in browsers, when available. Currently only available in Chrome and Firefox."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.code,{children:"Image"})," (aka ",(0,r.jsx)(a.code,{children:"HTMLImageElement"}),") - The traditional HTML image class. Available in all browsers."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.code,{children:"data"})," - Raw binary memory representing the image pixels, typically in RGBA ",(0,r.jsx)(a.code,{children:"Uint8Array"})," format. JavaScript computations can be done on this data. Also, Node.js texture creation functions in headless gl accept ",(0,r.jsx)(a.code,{children:"data"})," images. and browser ",(0,r.jsx)(a.code,{children:"ImageData"})," objects can be initialized with this data."]}),"\n"]}),"\n",(0,r.jsxs)(a.p,{children:["See ",(0,r.jsx)(a.a,{href:"/docs/modules/images/api-reference/image-loader",children:(0,r.jsx)(a.code,{children:"ImageLoader"})})," for more details on options etc."]})]})}function h(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},43023:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>d});var r=n(63696);const i={},t=r.createContext(i);function s(e){const a=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(t.Provider,{value:a},e.children)}}}]);