"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4342],{88448:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>n,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var s=t(74848),d=t(28453);const c={},n="Apache Arrow JavaScript API Reference",i={id:"arrowjs/api-reference/README",title:"Apache Arrow JavaScript API Reference",description:"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +.",source:"@site/../docs/arrowjs/api-reference/README.md",sourceDirName:"arrowjs/api-reference",slug:"/arrowjs/api-reference/",permalink:"/docs/arrowjs/api-reference/",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/arrowjs/api-reference/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Reading and Writing Arrow Data",permalink:"/docs/arrowjs/developer-guide/reading-and-writing"},next:{title:"Data",permalink:"/docs/arrowjs/api-reference/data"}},a={},l=[{value:"Class List",id:"class-list",level:2}];function o(e){const r={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"apache-arrow-javascript-api-reference",children:"Apache Arrow JavaScript API Reference"}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +."}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"class-list",children:"Class List"}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"TODO - This is a class list from the C++ docs, it has only been partially updated to match JS API"}),"\n"]}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Class"}),(0,s.jsx)(r.th,{children:"Summary"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Array"})}),(0,s.jsx)(r.td,{children:"Array base type Immutable data array with some logical type and some length"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"ArrayData"})}),(0,s.jsx)(r.td,{children:"Mutable container for generic Arrow array data"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"BinaryArray"})}),(0,s.jsx)(r.td,{children:"Concrete Array class for variable-size binary data"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"BooleanArray"})}),(0,s.jsx)(r.td,{children:"Concrete Array class for boolean data"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Buffer"})}),(0,s.jsx)(r.td,{children:"Object containing a pointer to a piece of contiguous memory with a particular size"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"ChunkedArray"})}),(0,s.jsx)(r.td,{children:"A data structure managing a list of primitive Arrow arrays logically as one large array"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Column"})}),(0,s.jsx)(r.td,{children:"An immutable column data structure consisting of a field (type metadata) and a chunked data array"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Decimal128"})}),(0,s.jsx)(r.td,{children:"Represents a signed 128-bit integer in two's complement"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Decimal128Array"})}),(0,s.jsx)(r.td,{children:"Concrete Array class for 128-bit decimal data"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"DictionaryArray"})}),(0,s.jsx)(r.td,{children:"Concrete Array class for dictionary data"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Field"})}),(0,s.jsx)(r.td,{children:"The combination of a field name and data type, with optional metadata"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"FixedSizeBinaryArray"})}),(0,s.jsx)(r.td,{children:"Concrete Array class for fixed-size binary data"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"FixedWidthType"})}),(0,s.jsx)(r.td,{children:"Base class for all fixed-width data types"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"FlatArray"})}),(0,s.jsx)(r.td,{children:"Base class for non-nested arrays"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"FloatingPoint"})}),(0,s.jsx)(r.td,{children:"Base class for all floating-point data types"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Int16Type"})}),(0,s.jsx)(r.td,{children:"Concrete type class for signed 16-bit integer data"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Int32Type"})}),(0,s.jsx)(r.td,{children:"Concrete type class for signed 32-bit integer data"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Int64Type"})}),(0,s.jsx)(r.td,{children:"Concrete type class for signed 64-bit integer data"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Int8Type"})}),(0,s.jsx)(r.td,{children:"Concrete type class for signed 8-bit integer data"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Integer"})}),(0,s.jsx)(r.td,{children:"Base class for all integral data types"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"ListArray"})}),(0,s.jsx)(r.td,{children:"Concrete Array class for list data"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"ListType"})}),(0,s.jsx)(r.td,{children:"Concrete type class for list data"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"NestedType"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"NullArray"})}),(0,s.jsx)(r.td,{children:"Degenerate null type Array"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"NullType"})}),(0,s.jsx)(r.td,{children:"Concrete type class for always-null data"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Number"})}),(0,s.jsx)(r.td,{children:"Base class for all numeric data types"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"NumericArray"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"PrimitiveArray"})}),(0,s.jsx)(r.td,{children:"Base class for arrays of fixed-size logical types"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"RecordBatch"})}),(0,s.jsx)(r.td,{children:"Collection of equal-length arrays matching a particular Schema"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"RecordBatchReader"})}),(0,s.jsx)(r.td,{children:"Abstract interface for reading stream of record batches"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Schema"})}),(0,s.jsx)(r.td,{children:"Sequence of arrow::Field objects describing the columns of a record batch or table data structure"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Status"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"StringArray"})}),(0,s.jsx)(r.td,{children:"Concrete Array class for variable-size string ( utf-8) data"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"StructArray"})}),(0,s.jsx)(r.td,{children:"Concrete Array class for struct data"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Table"})}),(0,s.jsx)(r.td,{children:"Logical table as sequence of chunked arrays"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"TableBatchReader"})}),(0,s.jsx)(r.td,{children:"Compute a sequence of record batches from a ( possibly chunked) Table"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"TimeUnit"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"UnionArray"})}),(0,s.jsx)(r.td,{children:"Concrete Array class for union data"})]})]})]})]})}function h(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>n,x:()=>i});var s=t(96540);const d={},c=s.createContext(d);function n(e){const r=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:n(e.components),s.createElement(c.Provider,{value:r},e.children)}}}]);