"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[6346],{18043:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>l});var i=t(62540),a=t(43023);const o={},c=void 0,n={id:"arrowjs/api-reference/record-batch-writer",title:"record-batch-writer",description:"RecordBatchWriter",source:"@site/../docs/arrowjs/api-reference/record-batch-writer.md",sourceDirName:"arrowjs/api-reference",slug:"/arrowjs/api-reference/record-batch-writer",permalink:"/docs/arrowjs/api-reference/record-batch-writer",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/arrowjs/api-reference/record-batch-writer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"RecordBatchReader",permalink:"/docs/arrowjs/api-reference/record-batch-reader"},next:{title:"RecordBatch",permalink:"/docs/arrowjs/api-reference/record-batch"}},s={},l=[{value:"RecordBatchWriter",id:"recordbatchwriter",level:2},{value:"Member Fields",id:"member-fields",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"<code>RecordBatchWriter.throughNode(options?: Object): DuplexStream</code>",id:"recordbatchwriterthroughnodeoptions-object-duplexstream",level:3},{value:"RecordBatchWriter.throughDOM(writableStrategy? : Object, readableStrategy? : Object) : Object",id:"recordbatchwriterthroughdomwritablestrategy--object-readablestrategy--object--object",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>toString(sync: Boolean): string | Promise&lt;string&gt;</code>",id:"tostringsync-boolean-string--promisestring",level:3},{value:"<code>toUint8Array(sync: Boolean): Uint8Array | Promise&lt;Uint8Array&gt;</code>",id:"touint8arraysync-boolean-uint8array--promiseuint8array",level:3},{value:"<code>writeAll(input: Table | Iterable&lt;RecordBatch&gt;): this</code>",id:"writeallinput-table--iterablerecordbatch-this",level:3},{value:"<code>writeAll(input: AsyncIterable&lt;RecordBatch&gt;</code>): <code>Promise&lt;this&gt;</code>",id:"writeallinput-asynciterablerecordbatch-promisethis",level:3},{value:"<code>writeAll(input: PromiseLike&lt;AsyncIterable&lt;RecordBatch&gt;&gt;): Promise&lt;this&gt;</code>",id:"writeallinput-promiselikeasynciterablerecordbatch-promisethis",level:3},{value:"<code>writeAll(input: PromiseLike&lt;Table | Iterable&lt;RecordBatch&gt;&gt;): Promise&lt;this&gt;</code>",id:"writeallinput-promiseliketable--iterablerecordbatch-promisethis",level:3},{value:"<code>toDOMStream(options?: Object): ReadableStream&lt;Uint8Array&gt;</code>",id:"todomstreamoptions-object-readablestreamuint8array",level:3},{value:"<code>toNodeStream(options?: Object): Readable</code>",id:"tonodestreamoptions-object-readable",level:3},{value:"<code>close() : void</code>",id:"close--void",level:3},{value:"<code>abort(reason?: any) : void</code>",id:"abortreason-any--void",level:3},{value:"<code>finish() : this</code>",id:"finish--this",level:3},{value:"<code>reset(sink?: WritableSink&lt;ArrayBufferViewInput&gt;, schema?: Schema | null): this</code>",id:"resetsink-writablesinkarraybufferviewinput-schema-schema--null-this",level:3},{value:"<code>write(payload?: Table | RecordBatch | Iterable&lt;Table&gt; | Iterable&lt;RecordBatch&gt; | null): void</code>",id:"writepayload-table--recordbatch--iterabletable--iterablerecordbatch--null-void",level:3},{value:"Remarks",id:"remarks",level:2}];function d(e){const r={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h2,{id:"recordbatchwriter",children:"RecordBatchWriter"}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsx)(r.p,{children:"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +."}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"RecordBatchWriter"}),' "serializes" Arrow Tables (or streams of RecordBatches) to the Arrow File, Stream, or JSON representations for inter-process communication (see also: ',(0,i.jsx)(r.a,{href:"https://arrow.apache.org/docs/format/IPC.html#streaming-format",children:"Arrow IPC format docs"}),")."]}),"\n",(0,i.jsxs)(r.p,{children:['The RecordBatchWriter is conceptually a "transform" stream that transforms Tables or RecordBatches into binary ',(0,i.jsx)(r.code,{children:"Uint8Array"})," chunks that represent the Arrow IPC messages (",(0,i.jsx)(r.code,{children:"Schema"}),", ",(0,i.jsx)(r.code,{children:"DictionaryBatch"}),", ",(0,i.jsx)(r.code,{children:"RecordBatch"}),", and in the case of the File format, ",(0,i.jsx)(r.code,{children:"Footer"})," messages)."]}),"\n",(0,i.jsxs)(r.p,{children:["These binary chunks are buffered inside the ",(0,i.jsx)(r.code,{children:"RecordBatchWriter"})," instance until they are consumed, typically by piping the RecordBatchWriter instance to a Writable Stream (like a file or socket), enumerating the chunks via async-iteration, or by calling ",(0,i.jsx)(r.code,{children:"toUint8Array()"})," to create a single contiguous buffer of the concatenated results once the desired Tables or RecordBatches have been written."]}),"\n",(0,i.jsxs)(r.p,{children:["RecordBatchWriter conforms to the ",(0,i.jsx)(r.code,{children:"AsyncIterableIterator"})," protocol in all environments, and supports two additional stream primitives based on the environment (nodejs or browsers) available at runtime."]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["In nodejs, the ",(0,i.jsx)(r.code,{children:"RecordBatchWriter"})," can be converted to a ",(0,i.jsx)(r.code,{children:"ReadableStream"}),", piped to a ",(0,i.jsx)(r.code,{children:"WritableStream"}),", and has a static method that returns a ",(0,i.jsx)(r.code,{children:"TransformStream"})," suitable in chained ",(0,i.jsx)(r.code,{children:"pipe"})," calls."]}),"\n",(0,i.jsxs)(r.li,{children:["browser environments that support the ",(0,i.jsx)(r.a,{href:"https://github.com/whatwg/streams",children:"DOM/WhatWG Streams Standard"}),", corresponding methods exist to convert ",(0,i.jsx)(r.code,{children:"RecordBatchWriters"})," to the DOM ",(0,i.jsx)(r.code,{children:"ReadableStream"}),", ",(0,i.jsx)(r.code,{children:"WritableStream"}),", and ",(0,i.jsx)(r.code,{children:"TransformStream"})," variants."]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"Note"}),": The Arrow JSON representation is not suitable as an IPC mechanism in real-world scenarios. It is used inside the Arrow project as a human-readable debugging tool and for validating interoperability between each language's separate implementation of the Arrow library."]}),"\n",(0,i.jsx)(r.h2,{id:"member-fields",children:"Member Fields"}),"\n",(0,i.jsx)(r.p,{children:"closed: Promise (readonly)"}),"\n",(0,i.jsxs)(r.p,{children:["A Promise which resolves when this ",(0,i.jsx)(r.code,{children:"RecordBatchWriter"})," is closed."]}),"\n",(0,i.jsx)(r.h2,{id:"static-methods",children:"Static Methods"}),"\n",(0,i.jsx)(r.h3,{id:"recordbatchwriterthroughnodeoptions-object-duplexstream",children:(0,i.jsx)(r.code,{children:"RecordBatchWriter.throughNode(options?: Object): DuplexStream"})}),"\n",(0,i.jsxs)(r.p,{children:["Creates a Node.js ",(0,i.jsx)(r.code,{children:"TransformStream"})," that transforms an input ",(0,i.jsx)(r.code,{children:"ReadableStream"})," of Tables or RecordBatches into a stream of ",(0,i.jsx)(r.code,{children:"Uint8Array"})," Arrow Message chunks."]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"options.autoDestroy"}),": boolean - (default: ",(0,i.jsx)(r.code,{children:"true"}),") Indicates whether the RecordBatchWriter should close after writing the first logical stream of RecordBatches (batches which all share the same Schema), or should continue and reset each time it encounters a new Schema."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"options.*"})," - Any Node Duplex stream options can be supplied"]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Returns: A Node.js Duplex stream"}),"\n",(0,i.jsx)(r.p,{children:"Example:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"const fs = require('fs');\nconst {PassThrough, finished} = require('stream');\nconst {Table, RecordBatchWriter} = require('apache-arrow');\n\nconst table = Table.new({\n  i32: Int32Vector.from([1, 2, 3]),\n  f32: Float32Vector.from([1.0, 1.5, 2.0])\n});\n\nconst source = new PassThrough({objectMode: true});\n\nconst result = source\n  .pipe(RecordBatchWriter.throughNode())\n  .pipe(fs.createWriteStream('table.arrow'));\n\nsource.write(table);\nsource.end();\n\nfinished(result, () => console.log('done writing table.arrow'));\n"})}),"\n",(0,i.jsx)(r.h3,{id:"recordbatchwriterthroughdomwritablestrategy--object-readablestrategy--object--object",children:"RecordBatchWriter.throughDOM(writableStrategy? : Object, readableStrategy? : Object) : Object"}),"\n",(0,i.jsxs)(r.p,{children:["Creates a DOM/WhatWG ",(0,i.jsx)(r.code,{children:"ReadableStream"}),"/",(0,i.jsx)(r.code,{children:"WritableStream"})," pair that together transforms an input ",(0,i.jsx)(r.code,{children:"ReadableStream"})," of Tables or RecordBatches into a stream of ",(0,i.jsx)(r.code,{children:"Uint8Array"})," Arrow Message chunks."]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"options.autoDestroy"}),": boolean - (default: ",(0,i.jsx)(r.code,{children:"true"}),") Indicates whether the RecordBatchWriter should close after writing the first logical stream of RecordBatches (batches which all share the same Schema), or should continue and reset each time it encounters a new Schema."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"writableStrategy.*"}),"= - Any options for",(0,i.jsx)(r.code,{children:" QueuingStrategy<RecordBatch>"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"readableStrategy.highWaterMark"}),"? : Number"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"readableStrategy.size"}),"?: Number"]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Returns: an object with the following fields:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"writable"}),": ",(0,i.jsx)(r.code,{children:"WritableStream<Table | RecordBatch>"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"readable"}),": ",(0,i.jsx)(r.code,{children:"ReadableStream<Uint8Array>"})]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(r.p,{children:"constructor(options? : Object)"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"options.autoDestroy"}),": boolean -"]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"tostringsync-boolean-string--promisestring",children:(0,i.jsx)(r.code,{children:"toString(sync: Boolean): string | Promise<string>"})}),"\n",(0,i.jsx)(r.h3,{id:"touint8arraysync-boolean-uint8array--promiseuint8array",children:(0,i.jsx)(r.code,{children:"toUint8Array(sync: Boolean): Uint8Array | Promise<Uint8Array>"})}),"\n",(0,i.jsx)(r.h3,{id:"writeallinput-table--iterablerecordbatch-this",children:(0,i.jsx)(r.code,{children:"writeAll(input: Table | Iterable<RecordBatch>): this"})}),"\n",(0,i.jsxs)(r.h3,{id:"writeallinput-asynciterablerecordbatch-promisethis",children:[(0,i.jsx)(r.code,{children:"writeAll(input: AsyncIterable<RecordBatch>"}),"): ",(0,i.jsx)(r.code,{children:"Promise<this>"})]}),"\n",(0,i.jsx)(r.h3,{id:"writeallinput-promiselikeasynciterablerecordbatch-promisethis",children:(0,i.jsx)(r.code,{children:"writeAll(input: PromiseLike<AsyncIterable<RecordBatch>>): Promise<this>"})}),"\n",(0,i.jsx)(r.h3,{id:"writeallinput-promiseliketable--iterablerecordbatch-promisethis",children:(0,i.jsx)(r.code,{children:"writeAll(input: PromiseLike<Table | Iterable<RecordBatch>>): Promise<this>"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:"[Symbol.asyncIterator](): AsyncByteQueue<Uint8Array>"})}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Returns An async iterator that produces Uint8Arrays."}),"\n",(0,i.jsx)(r.h3,{id:"todomstreamoptions-object-readablestreamuint8array",children:(0,i.jsx)(r.code,{children:"toDOMStream(options?: Object): ReadableStream<Uint8Array>"})}),"\n",(0,i.jsx)(r.p,{children:"Returns a new DOM/WhatWG stream that can be used to read the Uint8Array chunks produced by the RecordBatchWriter"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"options"})," - passed through to the DOM ReadableStream constructor, any DOM ReadableStream options."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"tonodestreamoptions-object-readable",children:(0,i.jsx)(r.code,{children:"toNodeStream(options?: Object): Readable"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"options"})," - passed through to the Node ReadableStream constructor, any Node ReadableStream options."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"close--void",children:(0,i.jsx)(r.code,{children:"close() : void"})}),"\n",(0,i.jsx)(r.p,{children:"Close the RecordBatchWriter. After close is called, no more chunks can be written."}),"\n",(0,i.jsx)(r.h3,{id:"abortreason-any--void",children:(0,i.jsx)(r.code,{children:"abort(reason?: any) : void"})}),"\n",(0,i.jsx)(r.h3,{id:"finish--this",children:(0,i.jsx)(r.code,{children:"finish() : this"})}),"\n",(0,i.jsx)(r.h3,{id:"resetsink-writablesinkarraybufferviewinput-schema-schema--null-this",children:(0,i.jsx)(r.code,{children:"reset(sink?: WritableSink<ArrayBufferViewInput>, schema?: Schema | null): this"})}),"\n",(0,i.jsx)(r.p,{children:"Change the sink"}),"\n",(0,i.jsx)(r.h3,{id:"writepayload-table--recordbatch--iterabletable--iterablerecordbatch--null-void",children:(0,i.jsx)(r.code,{children:"write(payload?: Table | RecordBatch | Iterable<Table> | Iterable<RecordBatch> | null): void"})}),"\n",(0,i.jsxs)(r.p,{children:["Writes a ",(0,i.jsx)(r.code,{children:"RecordBatch"})," or all the RecordBatches from a ",(0,i.jsx)(r.code,{children:"Table"}),"."]}),"\n",(0,i.jsx)(r.h2,{id:"remarks",children:"Remarks"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Just like the ",(0,i.jsx)(r.code,{children:"RecordBatchReader"}),", a ",(0,i.jsx)(r.code,{children:"RecordBatchWriter"})," is a factory base class that returns an instance of the subclass appropriate to the situation: ",(0,i.jsx)(r.code,{children:"RecordBatchStreamWriter"}),", ",(0,i.jsx)(r.code,{children:"RecordBatchFileWriter"}),", ",(0,i.jsx)(r.code,{children:"RecordBatchJSONWriter"})]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},43023:(e,r,t)=>{t.d(r,{R:()=>c,x:()=>n});var i=t(63696);const a={},o=i.createContext(a);function c(e){const r=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function n(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),i.createElement(o.Provider,{value:r},e.children)}}}]);