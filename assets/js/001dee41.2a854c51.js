"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[1287],{87694:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>a});var n=r(62540),c=r(43023);const o={},i="selectSource",t={id:"modules/core/api-reference/select-source",title:"selectSource",description:'The selectSource() function will make a "best effort" to select an appropriate source for a specific url or Blob. selectSource() is called internally by the',source:"@site/../docs/modules/core/api-reference/select-source.md",sourceDirName:"modules/core/api-reference",slug:"/modules/core/api-reference/select-source",permalink:"/docs/modules/core/api-reference/select-source",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/core/api-reference/select-source.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"registerLoaders",permalink:"/docs/modules/core/api-reference/register-loaders"},next:{title:"createDataSource",permalink:"/docs/modules/core/api-reference/create-data-source"}},l={},a=[{value:"Usage",id:"usage",level:2},{value:"Functions",id:"functions",level:2},{value:"selectSource()",id:"selectsource-1",level:3},{value:"Supported Data Formats",id:"supported-data-formats",level:2},{value:"MIME types",id:"mime-types",level:2},{value:"Remarks",id:"remarks",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"selectsource",children:"selectSource"})}),"\n",(0,n.jsx)("p",{class:"badges",children:(0,n.jsx)("img",{src:"https://img.shields.io/badge/From-v4.2-blue.svg?style=flat-square",alt:"From v4.2"})}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"selectSource()"}),' function will make a "best effort" to select an appropriate source for a specific url or Blob. ',(0,n.jsx)(s.code,{children:"selectSource()"})," is called internally by the\n",(0,n.jsx)(s.code,{children:"createDataSource()"})," and ",(0,n.jsx)(s.code,{children:"createDataSourceSync()"})," functions, but can also be called directly from applications."]}),"\n",(0,n.jsx)(s.p,{children:"Source selection heuristics are based on:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Filename (or url) extensions"}),"\n",(0,n.jsxs)(s.li,{children:["MIME types (from ",(0,n.jsx)(s.code,{children:"Response"})," ",(0,n.jsx)(s.code,{children:"content-type"})," headers or ",(0,n.jsx)(s.code,{children:"Blob.type"}),"/",(0,n.jsx)(s.code,{children:"File.type"})," fields)"]}),"\n",(0,n.jsx)(s.li,{children:'Initial bytes - for certain inputs, the initial bytes in the supplied data can be compared against known "magic bytes" for various file formats.'}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(s.p,{children:"Select a source from a list of provided sources (best effort):"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"import {selectSourceSync} from '@loaders.gl/core';\nimport {PMTilesSource} from '@loaders.gl/pmtiles';\nimport {MVTSource} from '@loaders.gl/csv';\n\nselectSourceSync('filename.pmtiles', [PMTilesSource, MVTSource]); // => PMTilesSource\n"})}),"\n",(0,n.jsx)(s.h2,{id:"functions",children:"Functions"}),"\n",(0,n.jsx)(s.h3,{id:"selectsource-1",children:"selectSource()"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"selectSource(data: String | Blob, ..., sources?: Source[], options?): Promise<Source | null>`\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Selects an appropriate source for a file from a list of candidate sources by examining the ",(0,n.jsx)(s.code,{children:"data"})," parameter, looking at URL extension, mimeType ('Content-Type') and/or an initial data chunk."]}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"data"})," - data to perform autodetection against"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"sources"})," - can be a single source or an array of sources, or null."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"options.type"})," - Force selection to a specific type of source (must still be provided in the source list)."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"options.nothrow"}),"=",(0,n.jsx)(s.code,{children:"false"})," - Return null instead of throwing exception if no source can be found"]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"Returns:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["A single source (or ",(0,n.jsx)(s.code,{children:"null"})," if ",(0,n.jsx)(s.code,{children:"options.nothrow"})," was set and no matching source was found)."]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"Throws:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["If no matching source was found, and ",(0,n.jsx)(s.code,{children:"options.nothrow"})," was not set."]}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["Regarding the ",(0,n.jsx)(s.code,{children:"sources"})," parameter:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"A single source object will be returned without matching."}),"\n",(0,n.jsxs)(s.li,{children:["a ",(0,n.jsx)(s.code,{children:"null"})," source list will use the pre-registered list of sources."]}),"\n",(0,n.jsx)(s.li,{children:"A supplied list of sources will be searched for a matching source."}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"supported-data-formats",children:"Supported Data Formats"}),"\n",(0,n.jsxs)(s.p,{children:["The acceptable types for ",(0,n.jsx)(s.code,{children:"data"})," are inferred from the supplied loaders and may include:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"strings / data urls"}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"File"})," and ",(0,n.jsx)(s.code,{children:"Blob"})," objects:"]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"mime-types",children:"MIME types"}),"\n",(0,n.jsxs)(s.p,{children:["If the standard MIME types for each format are not precise enough, sources.gl also supports ",(0,n.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Media_type#Unregistered_tree",children:"unregistered"})," MIME types. Each source will match the ",(0,n.jsx)(s.code,{children:"application/x.<id>"})," where the ",(0,n.jsx)(s.code,{children:"<id>"})," is the documented ",(0,n.jsx)(s.code,{children:"id"})," of the source, e.g. ",(0,n.jsx)(s.code,{children:"application/x.ply"}),"/",(0,n.jsx)(s.code,{children:"application/x.draco"}),"/etc ..."]}),"\n",(0,n.jsx)(s.h2,{id:"remarks",children:"Remarks"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"File extensions - An attempt will be made to extract a file extension by stripping away query parameters and base path before matching against known source extensions."}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},43023:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>t});var n=r(63696);const c={},o=n.createContext(c);function i(e){const s=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),n.createElement(o.Provider,{value:s},e.children)}}}]);