"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[8608],{98963:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var s=n(62540),o=n(43023);const a={},t="parseSync",i={id:"modules/core/api-reference/parse-sync",title:"parseSync",description:"Synchronous parsing is not supported by all loaders. Refer to the documentation for each loader.",source:"@site/../docs/modules/core/api-reference/parse-sync.md",sourceDirName:"modules/core/api-reference",slug:"/modules/core/api-reference/parse-sync",permalink:"/docs/modules/core/api-reference/parse-sync",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/core/api-reference/parse-sync.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"parse",permalink:"/docs/modules/core/api-reference/parse"},next:{title:"parseInBatches",permalink:"/docs/modules/core/api-reference/parse-in-batches"}},c={},d=[{value:"Usage",id:"usage",level:2}];function l(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"parsesync",children:"parseSync"})}),"\n",(0,s.jsx)(r.admonition,{type:"caution",children:(0,s.jsx)(r.p,{children:"Synchronous parsing is not supported by all loaders. Refer to the documentation for each loader."})}),"\n",(0,s.jsx)(r.admonition,{type:"caution",children:(0,s.jsxs)(r.p,{children:["When calling parse from a loader to invoke a sub-loader, do not use this function. Use ",(0,s.jsx)(r.code,{children:"parseSyncWithContext"})," counterparts in `@loaders.gl/loader-utils``"]})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"parseSync()"})," function parses data synchronously using the provided loader, if possible."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"parseSync(data: ArrayBuffer | string, loaders: Loader, options?: LoaderOptions, url?: string]]) : unknown\nparseSync(data: ArrayBuffer | string, loaders: Loader[], options?: LoaderOptions, url?: string]]) : unknown\n"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"data"}),": already loaded data, either in binary or text format. This parameter can be any of the following types:","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"Response"}),": ",(0,s.jsx)(r.code,{children:"fetch"})," response object returned by ",(0,s.jsx)(r.code,{children:"fetchFile"})," or ",(0,s.jsx)(r.code,{children:"fetch"}),"."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"ArrayBuffer"}),": Parse from binary data in an array buffer"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"string"}),": Parse from text data in a string. (Only works for loaders that support textual input)."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"Iterator"}),": Iterator that yeilds binary (",(0,s.jsx)(r.code,{children:"ArrayBuffer"}),") chunks or string chunks (string chunks only work for loaders that support textual input).\ncan also be supplied."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"loaders"}),": can be a single loader or an array of loaders. If ommitted, will use the list of registered loaders (see ",(0,s.jsx)(r.code,{children:"registerLoaders"}),")"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"options"}),": See ",(0,s.jsx)(r.a,{href:"./loader-options",children:(0,s.jsx)(r.code,{children:"LoaderOptions"})}),"."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"url"}),": optional, assists in the autoselection of a loader if multiple loaders are supplied to ",(0,s.jsx)(r.code,{children:"loader"}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Returns:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Return value depends on the ",(0,s.jsx)(r.em,{children:"loader object"})," category, or ",(0,s.jsx)(r.code,{children:"null"}),", in which case asynchronous parsing is required."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import {fetchFile, parseSync} from '@loaders.gl/core';\nimport {OBJLoader} from '@loaders.gl/obj';\n\nconst response = await fetchFile(url);\nconst arraybuffer = await response.arrayBuffer();\n\ndata = parseSync(arraybuffer, OBJLoader);\n// Application code here\n...\n"})}),"\n",(0,s.jsx)(r.p,{children:"Handling errors"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"try {\n  const data = await parseSync(data);\n} catch (error) {\n  console.log(error);\n}\n"})})]})}function p(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},43023:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>i});var s=n(63696);const o={},a=s.createContext(o);function t(e){const r=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(a.Provider,{value:r},e.children)}}}]);