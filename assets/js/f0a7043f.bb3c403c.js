"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[2242],{26840:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var n=r(74848),s=r(28453);const a={},i="AsyncIterators",c={id:"developer-guide/concepts/async-iterators",title:"AsyncIterators",description:"Streaming functionality in loaders.gl is built on the ES2018 AsyncIterator concept.",source:"@site/../docs/developer-guide/concepts/async-iterators.md",sourceDirName:"developer-guide/concepts",slug:"/developer-guide/concepts/async-iterators",permalink:"/docs/developer-guide/concepts/async-iterators",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/developer-guide/concepts/async-iterators.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Streaming",permalink:"/docs/developer-guide/concepts/streaming"},next:{title:"Worker Threads",permalink:"/docs/developer-guide/concepts/worker-threads"}},o={},d=[{value:"Availability",id:"availability",level:2},{value:"Iterators and TypeScript",id:"iterators-and-typescript",level:2},{value:"Batched Parsing and Endcoding using AsyncIterators",id:"batched-parsing-and-endcoding-using-asynciterators",level:2},{value:"Using AsyncIterators",id:"using-asynciterators",level:2},{value:"Using Streams as AsyncIterators",id:"using-streams-as-asynciterators",level:2},{value:"Creating AsyncIterators",id:"creating-asynciterators",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"asynciterators",children:"AsyncIterators"}),"\n",(0,n.jsxs)(t.p,{children:["Streaming functionality in loaders.gl is built on the ES2018 ",(0,n.jsx)(t.code,{children:"AsyncIterator"})," concept.\nThis page gives some background on ",(0,n.jsx)(t.code,{children:"AsyncIterator"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"availability",children:"Availability"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"AsyncIterator"})," and the ",(0,n.jsx)(t.code,{children:"for await of"})," iteration syntax are standard JavaScript ES2018 features and are supported by all recent evergreen browsers and Node.js versions as well as e.g. the babel transpiler."]}),"\n",(0,n.jsx)(t.h2,{id:"iterators-and-typescript",children:"Iterators and TypeScript"}),"\n",(0,n.jsx)(t.p,{children:"There are multiple similar-sounding types supporting the type safe use of iterators which can be a source of confusion to users, so some information is provided here:"}),"\n",(0,n.jsxs)(t.p,{children:["| Type | Async Type | Type Parameters |\nDescription |\n| ------------------ | ----------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| ",(0,n.jsx)(t.code,{children:"Iterator"})," | ",(0,n.jsx)(t.code,{children:"AsyncIterator"})," | ",(0,n.jsx)(t.code,{children:"<...>"})," | An iterator has ",(0,n.jsx)(t.code,{children:"next()"}),", ... methods |\n| ",(0,n.jsx)(t.code,{children:"Iterable"})," | ",(0,n.jsx)(t.code,{children:"AsyncIterable"})," | ",(0,n.jsx)(t.code,{children:"<...>"})," | An iterable is a class that has a ",(0,n.jsx)(t.code,{children:"[Symbol.iterator]"})," or ",(0,n.jsx)(t.code,{children:"[Symbol.asyncIterator]"})," property that returns an ",(0,n.jsx)(t.code,{children:"Iterator"})," or ",(0,n.jsx)(t.code,{children:"AsyncIterator"})," |\n| ",(0,n.jsx)(t.code,{children:"Generator"})," | ",(0,n.jsx)(t.code,{children:"AsyncGenerator"})," | ",(0,n.jsx)(t.code,{children:"<...>"})," | A generator is a function that takes some parameters and when called returns an ",(0,n.jsx)(t.code,{children:"Iterator"})," or ",(0,n.jsx)(t.code,{children:"AsyncIterator"})," |\n| ",(0,n.jsx)(t.code,{children:"IterableIterator"})," | ",(0,n.jsx)(t.code,{children:"AsyncIterableIterator"})," | ",(0,n.jsx)(t.code,{children:"<...>"})," | It is convenient to define ",(0,n.jsx)(t.code,{children:"Iterator"}),"s that are also ",(0,n.jsx)(t.code,{children:"Iterable"}),". Most built in container classes return this type. |"]}),"\n",(0,n.jsxs)(t.p,{children:["An ",(0,n.jsx)(t.code,{children:"IterableIterator"})," can"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"be used in a for..of loop"}),"\n",(0,n.jsx)(t.li,{children:"be spread into an array"}),"\n",(0,n.jsx)(t.li,{children:"be spread into a parameter list"}),"\n",(0,n.jsxs)(t.li,{children:["be used in APIs that accept iterables like ",(0,n.jsx)(t.code,{children:"Array.from()"}),", ",(0,n.jsx)(t.code,{children:"new Set()"}),", ",(0,n.jsx)(t.code,{children:"new Map()"})]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"interface Iterable {\n  [Symbol.iterator](): Iterator;\n}\ninterface Iterator {\n  next(): IteratorResult;\n  return?(value?: any): IteratorResult;\n}\ninterface IteratorResult {\n  value: any;\n  done: boolean;\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://exploringjs.com/es6/ch_iteration.html#sec_implementing-iterables",children:"https://exploringjs.com/es6/ch_iteration.html#sec_implementing-iterables"})}),"\n",(0,n.jsx)(t.h2,{id:"batched-parsing-and-endcoding-using-asynciterators",children:"Batched Parsing and Endcoding using AsyncIterators"}),"\n",(0,n.jsx)(t.p,{children:"The input and output from streaming loaders and writers can both be expressed in terms of async iterators."}),"\n",(0,n.jsx)(t.h2,{id:"using-asynciterators",children:"Using AsyncIterators"}),"\n",(0,n.jsxs)(t.p,{children:["Remember that an ",(0,n.jsx)(t.code,{children:"AsyncIterator"})," or ",(0,n.jsx)(t.code,{children:"AsyncIterable"})," can be consumed (iterated over) via the for-await construct:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"for await (const x of asyncIterable) {\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"using-streams-as-asynciterators",children:"Using Streams as AsyncIterators"}),"\n",(0,n.jsxs)(t.p,{children:["With a little effort, streams in JavaScript can be treated as AsyncIterators. As the section about ",(0,n.jsx)(t.a,{href:"/docs/developer-guide/concepts/streaming",children:"Javascript Streams"})," explains, instead of registering callbacks on the stream, you can now work with streams in this way:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"for await (const buf of fs.createReadStream('foo.txt')) {\n  // do something\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"creating-asynciterators",children:"Creating AsyncIterators"}),"\n",(0,n.jsxs)(t.p,{children:["Remember that any object in JavaScript that implements the ",(0,n.jsx)(t.code,{children:"[Symbol.asyncIterator]()"})," method is an ",(0,n.jsx)(t.code,{children:"AsyncIterable"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["And the async ",(0,n.jsx)(t.strong,{children:"generator"})," syntax ",(0,n.jsx)(t.code,{children:"async function *"})," can be used to generate new async iterators"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"async function * makeAsyncIterator() {\n  yield new Promise(...)\n}\n\nfor await (const x of makeAsyncIterator()) {} // Notice parens after 'makeAsyncIterator'\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>c});var n=r(96540);const s={},a=n.createContext(s);function i(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);