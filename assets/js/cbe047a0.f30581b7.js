"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[6711],{87931:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=s(74848),n=s(28453);const i={},a="Data Types",o={id:"arrowjs/developer-guide/data-types",title:"Data Types",description:"Arrow supports a rich set of data types:",source:"@site/../docs/arrowjs/developer-guide/data-types.md",sourceDirName:"arrowjs/developer-guide",slug:"/arrowjs/developer-guide/data-types",permalink:"/docs/arrowjs/developer-guide/data-types",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/arrowjs/developer-guide/data-types.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Examples",permalink:"/docs/arrowjs/get-started/examples"},next:{title:"Schemas",permalink:"/docs/arrowjs/developer-guide/schemas"}},d={},c=[{value:"Data Type Descriptor Objects",id:"data-type-descriptor-objects",level:2},{value:"Converting Dates",id:"converting-dates",level:3}];function p(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"data-types",children:"Data Types"}),"\n",(0,r.jsx)(t.p,{children:"Arrow supports a rich set of data types:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Fixed-length primitive types: numbers, booleans, date and times, fixed size binary, decimals, and other values that fit into a given number"}),"\n",(0,r.jsx)(t.li,{children:"Variable-length primitive types: binary, string"}),"\n",(0,r.jsx)(t.li,{children:"Nested types: list, struct, and union"}),"\n",(0,r.jsx)(t.li,{children:"Dictionary type: An encoded categorical type"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"data-type-descriptor-objects",children:"Data Type Descriptor Objects"}),"\n",(0,r.jsx)(t.h3,{id:"converting-dates",children:"Converting Dates"}),"\n",(0,r.jsx)(t.p,{children:'Apache Arrow Timestamp is a 64-bit int of milliseconds since the epoch, represented as two 32-bit ints in JS to preserve precision. The fist number is the "low" int and the second number is the "high" int.'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"function toDate(timestamp) {\n  return new Date((timestamp[1] * Math.pow(2, 32) + timestamp[0]) / 1000);\n}\n"})})]})}function l(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var r=s(96540);const n={},i=r.createContext(n);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);