"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[661],{2464:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>d,toc:()=>l});var n=r(74848),o=r(28453);const c={},i="Row",d={id:"arrowjs/api-reference/row",title:"Row",description:"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +.",source:"@site/../docs/arrowjs/api-reference/row.md",sourceDirName:"arrowjs/api-reference",slug:"/arrowjs/api-reference/row",permalink:"/docs/arrowjs/api-reference/row",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/arrowjs/api-reference/row.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"RecordBatch",permalink:"/docs/arrowjs/api-reference/record-batch"},next:{title:"Schema",permalink:"/docs/arrowjs/api-reference/schema"}},s={},l=[{value:"Methods",id:"methods",level:2},{value:"<code>[key: string]: T[keyof T][&#39;TValue&#39;]</code>",id:"key-string-tkeyof-ttvalue",level:3},{value:"<code>[kParent]: MapVector&lt;T&gt;</code> | <code>StructVector&lt;T&gt;</code>",id:"kparent-mapvectort--structvectort",level:3},{value:"<code>[kRowIndex]: number</code>",id:"krowindex-number",level:3},{value:"<code>[kLength]: number</code> (readonly)",id:"klength-number-readonly",level:3},{value:"<code>[Symbol.iterator](): IterableIterator&lt;T[keyof T][&quot;TValue&quot;]&gt;</code>",id:"symboliterator-iterableiteratortkeyof-ttvalue",level:3},{value:"<code>get(key: K): T[K][&quot;TValue&quot;]</code>",id:"getkey-k-tktvalue",level:3},{value:"toJSON(): any",id:"tojson-any",level:3},{value:"toString(): any",id:"tostring-any",level:3}];function a(e){const t={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"row",children:"Row"}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +."}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["A ",(0,n.jsx)(t.code,{children:"Row"})," is an Object that retrieves each value at a certain index across a collection of child Vectors. Rows are returned from the ",(0,n.jsx)(t.code,{children:"get()"})," function of the nested ",(0,n.jsx)(t.code,{children:"StructVector"})," and ",(0,n.jsx)(t.code,{children:"MapVector"}),", as well as ",(0,n.jsx)(t.code,{children:"RecordBatch"})," and ",(0,n.jsx)(t.code,{children:"Table"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["A ",(0,n.jsx)(t.code,{children:"Row"})," defines read-only accessors for the indices and (if applicable) names of the child Vectors. For example, given a ",(0,n.jsx)(t.code,{children:"StructVector"})," with the following schema:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"const children = [Int32Vector.from([0, 1]), Utf8Vector.from(['foo', 'bar'])];\n\nconst type = new Struct<{id: Int32; value: Utf8}>([\n  new Field('id', children[0].type),\n  new Field('value', children[1].type)\n]);\n\nconst vector = new StructVector(Data.Struct(type, 0, 2, 0, null, children));\n\nconst row = vector.get(1);\n\nassert(row[0] === 1 && row.id === row[0]);\nassert(row[1] === 'bar' && row.value === row[1]);\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"Row"})," implements the Iterator interface, enumerating each value in order of the child vectors list."]}),"\n",(0,n.jsx)(t.p,{children:"Notes:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["If the Row's parent type is a ",(0,n.jsx)(t.code,{children:"Struct"}),", ",(0,n.jsx)(t.code,{children:"Object.getOwnPropertyNames(row)"})," returns the child vector indices."]}),"\n",(0,n.jsxs)(t.li,{children:["If the Row's parent type is a ",(0,n.jsx)(t.code,{children:"Map"}),", ",(0,n.jsx)(t.code,{children:"Object.getOwnPropertyNames(row)"})," returns the child vector field names, as defined by the ",(0,n.jsx)(t.code,{children:"children"})," Fields list of the ",(0,n.jsx)(t.code,{children:"Map"})," instance."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"key-string-tkeyof-ttvalue",children:(0,n.jsx)(t.code,{children:"[key: string]: T[keyof T]['TValue']"})}),"\n",(0,n.jsxs)(t.h3,{id:"kparent-mapvectort--structvectort",children:[(0,n.jsx)(t.code,{children:"[kParent]: MapVector<T>"})," | ",(0,n.jsx)(t.code,{children:"StructVector<T>"})]}),"\n",(0,n.jsx)(t.h3,{id:"krowindex-number",children:(0,n.jsx)(t.code,{children:"[kRowIndex]: number"})}),"\n",(0,n.jsxs)(t.h3,{id:"klength-number-readonly",children:[(0,n.jsx)(t.code,{children:"[kLength]: number"})," (readonly)"]}),"\n",(0,n.jsx)(t.h3,{id:"symboliterator-iterableiteratortkeyof-ttvalue",children:(0,n.jsx)(t.code,{children:'[Symbol.iterator](): IterableIterator<T[keyof T]["TValue"]>'})}),"\n",(0,n.jsx)(t.h3,{id:"getkey-k-tktvalue",children:(0,n.jsx)(t.code,{children:'get(key: K): T[K]["TValue"]'})}),"\n",(0,n.jsxs)(t.p,{children:["Returns the value at the supplied ",(0,n.jsx)(t.code,{children:"key"}),", where ",(0,n.jsx)(t.code,{children:"key"})," is either the integer index of the set of child vectors, or the name of a child Vector"]}),"\n",(0,n.jsx)(t.h3,{id:"tojson-any",children:"toJSON(): any"}),"\n",(0,n.jsx)(t.h3,{id:"tostring-any",children:"toString(): any"})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>d});var n=r(96540);const o={},c=n.createContext(o);function i(e){const t=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(c.Provider,{value:t},e.children)}}}]);