"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9729],{39066:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>c});var t=s(62540),d=s(43023);const o={},i="CompressedTextureLoader",n={id:"modules/textures/api-reference/compressed-texture-loader",title:"CompressedTextureLoader",description:"Loader for compressed textures in the PVR file format",source:"@site/../docs/modules/textures/api-reference/compressed-texture-loader.md",sourceDirName:"modules/textures/api-reference",slug:"/modules/textures/api-reference/compressed-texture-loader",permalink:"/docs/modules/textures/api-reference/compressed-texture-loader",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/textures/api-reference/compressed-texture-loader.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BasisLoader",permalink:"/docs/modules/textures/api-reference/basis-loader"},next:{title:"Worker",permalink:"/docs/modules/textures/api-reference/crunch-loader"}},a={},c=[{value:"Usage",id:"usage",level:2},{value:"Data Format",id:"data-format",level:2},{value:"Options",id:"options",level:2},{value:"Basis loader",id:"basis-loader",level:2}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"compressedtextureloader",children:"CompressedTextureLoader"})}),"\n",(0,t.jsx)("p",{class:"badges",children:(0,t.jsx)("img",{src:"https://img.shields.io/badge/From-v3.0-blue.svg?style=flat-square",alt:"From-v3.0"})}),"\n",(0,t.jsx)(r.p,{children:"Loader for compressed textures in the PVR file format"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Loader"}),(0,t.jsx)(r.th,{children:"Characteristic"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"File Format"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.a,{href:"http://powervr-graphics.github.io/WebGL_SDK/WebGL_SDK/Documentation/Specifications/PVR%20File%20Format.Specification.pdf",children:"PVR"}),", ",(0,t.jsx)(r.a,{href:"https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide",children:"DDS"}),", ",(0,t.jsx)(r.a,{href:"https://github.com/KhronosGroup/KTX-Software/",children:"KTX"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"File Extension"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:".dds"}),", ",(0,t.jsx)(r.code,{children:".pvr"}),", ",(0,t.jsx)(r.code,{children:".ktx"}),", ",(0,t.jsx)(r.code,{children:".ktx2"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"File Type"}),(0,t.jsx)(r.td,{children:"Binary"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Data Format"}),(0,t.jsx)(r.td,{children:"Array of compressed image data objects"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Supported APIs"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"load"}),", ",(0,t.jsx)(r.code,{children:"parse"})]})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"import {CompressedTextureLoader} from '@loaders.gl/textures';\nimport {load} from '@loaders.gl/core';\n\nconst mipLevels = await load(url, CompressedTextureLoader);\nfor (const image of mipLevels) {\n  ...\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"data-format",children:"Data Format"}),"\n",(0,t.jsx)(r.p,{children:"Returns an array of image data objects representing mip levels."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.code,{children:"{compressed: true, format, width, height, data: ..., levelSize}"})}),"\n",(0,t.jsx)(r.h2,{id:"options",children:"Options"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Option"}),(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Default"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsx)(r.tbody,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"compressed-texture.useBasis"})}),(0,t.jsx)(r.td,{children:"Boolean"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"false"})}),(0,t.jsxs)(r.td,{children:["Use ",(0,t.jsx)(r.a,{href:"/docs/modules/textures/api-reference/basis-loader",children:"BasisLoader"})," to decode KTX2 texture"]})]})})]}),"\n",(0,t.jsx)(r.h2,{id:"basis-loader",children:"Basis loader"}),"\n",(0,t.jsxs)(r.p,{children:["From v3.1 ",(0,t.jsx)(r.a,{href:"/docs/modules/textures/api-reference/basis-loader",children:"BasisLoader"})," supports decoding KTX2 format. Applying BasisLoader for KTX2 files can possibly give results when internal ktx parser can't parse an image for some reason."]})]})}function h(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},43023:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>n});var t=s(63696);const d={},o=t.createContext(d);function i(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function n(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);