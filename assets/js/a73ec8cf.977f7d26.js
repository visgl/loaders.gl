"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4557],{25803:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>n,metadata:()=>i,toc:()=>c});var t=s(74848),a=s(28453);const n={},o="Data Sources and Sinks",i={id:"arrowjs/developer-guide/data-sources",title:"Data Sources and Sinks",description:"The Arrow JavaScript API is designed to make it easy to work with data sources both in the browser and in Node.js.",source:"@site/../docs/arrowjs/developer-guide/data-sources.md",sourceDirName:"arrowjs/developer-guide",slug:"/arrowjs/developer-guide/data-sources",permalink:"/docs/arrowjs/developer-guide/data-sources",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/arrowjs/developer-guide/data-sources.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Working with BigInts",permalink:"/docs/arrowjs/developer-guide/big-ints"},next:{title:"Reading and Writing Arrow Data",permalink:"/docs/arrowjs/developer-guide/reading-and-writing"}},d={},c=[{value:"Streams",id:"streams",level:2},{value:"Fetch Responses",id:"fetch-responses",level:2},{value:"ArrayBuffers",id:"arraybuffers",level:2},{value:"AsyncIterators",id:"asynciterators",level:2}];function u(e){const r={code:"code",h1:"h1",h2:"h2",p:"p",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"data-sources-and-sinks",children:"Data Sources and Sinks"}),"\n",(0,t.jsx)(r.p,{children:"The Arrow JavaScript API is designed to make it easy to work with data sources both in the browser and in Node.js."}),"\n",(0,t.jsx)(r.h2,{id:"streams",children:"Streams"}),"\n",(0,t.jsx)(r.p,{children:"Both Node and DOM/WhatWG Streams can be used directly as input sources by the Arrow JS API."}),"\n",(0,t.jsx)(r.h2,{id:"fetch-responses",children:"Fetch Responses"}),"\n",(0,t.jsx)(r.p,{children:"Fetch responses (Promises) can be used where a data source is expected."}),"\n",(0,t.jsx)(r.h2,{id:"arraybuffers",children:"ArrayBuffers"}),"\n",(0,t.jsxs)(r.p,{children:["Most data sources accept ",(0,t.jsx)(r.code,{children:"Uint8Arrays"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"asynciterators",children:"AsyncIterators"}),"\n",(0,t.jsx)(r.p,{children:'Async iterators are the most general way to abstract "streaming" data sources and data sinks and are consistently accepted (and in many cased returned) by the Arrow JS API.'})]})}function l(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>o,x:()=>i});var t=s(96540);const a={},n=t.createContext(a);function o(e){const r=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(n.Provider,{value:r},e.children)}}}]);