"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[1637],{68939:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var n=s(62540),t=s(43023);const o={},a="parse",d={id:"modules/core/api-reference/parse",title:"parse",description:'This function "atomically" parses data (i.e. parses the entire data set in one operation). It can be called on "already loaded" data such as ArrayBuffer and string objects.',source:"@site/../docs/modules/core/api-reference/parse.md",sourceDirName:"modules/core/api-reference",slug:"/modules/core/api-reference/parse",permalink:"/docs/modules/core/api-reference/parse",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/core/api-reference/parse.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"loadInBatches",permalink:"/docs/modules/core/api-reference/load-in-batches"},next:{title:"parseSync",permalink:"/docs/modules/core/api-reference/parse-sync"}},i={},c=[{value:"Usage",id:"usage",level:2},{value:"Functions",id:"functions",level:2},{value:"parse(data: Response | ArrayBuffer | String, loaders: Object | Object[], options?: Object) : Promise&lt;Any&gt;",id:"parsedata-response--arraybuffer--string-loaders-object--object-options-object--promiseany",level:3}];function l(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"parse",children:"parse"})}),"\n",(0,n.jsxs)(r.p,{children:['This function "atomically" parses data (i.e. parses the entire data set in one operation). It can be called on "already loaded" data such as ',(0,n.jsx)(r.code,{children:"ArrayBuffer"})," and ",(0,n.jsx)(r.code,{children:"string"})," objects."]}),"\n",(0,n.jsxs)(r.p,{children:["In contrast to ",(0,n.jsx)(r.code,{children:"load"}),", ",(0,n.jsx)(r.code,{children:"parse"})," does not accept URLs (it treats strings as data to be parsed) however it does read data from ",(0,n.jsx)(r.code,{children:"Response"})," objects (which can involve loading data from a source). ",(0,n.jsx)(r.code,{children:"Response"})," objects are returned by ",(0,n.jsx)(r.code,{children:"fetch"})," but can also be manually created to wrap other data types, which makes ",(0,n.jsx)(r.code,{children:"parse"})," quite flexible."]}),"\n",(0,n.jsx)(r.admonition,{type:"caution",children:(0,n.jsxs)(r.p,{children:["When calling parse from a loader to invoke a sub-loader, do not use this function. Use the ",(0,n.jsx)(r.code,{children:"parseWithContext"})," counterparts in `@loaders.gl/loader-utils``"]})}),"\n",(0,n.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsxs)(r.p,{children:["The return value from ",(0,n.jsx)(r.code,{children:"fetch"})," or ",(0,n.jsx)(r.code,{children:"fetchFile"})," is a ",(0,n.jsx)(r.code,{children:"Promise"})," that resolves to the fetch ",(0,n.jsx)(r.code,{children:"Response"})," object and can be passed directly to the non-sync parser functions:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:"import {fetchFile, parse} from '@loaders.gl/core';\nimport {OBJLoader} from '@loaders.gl/obj';\n\ndata = await parse(fetchFile(url), OBJLoader);\n// Application code here\n...\n"})}),"\n",(0,n.jsx)(r.p,{children:"Batched (streaming) parsing is supported by some loaders"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:"import {fetchFile, parseInBatches} from '@loaders.gl/core';\nimport {CSVLoader} from '@loaders.gl/obj';\n\nconst batchIterator = await parseInBatches(fetchFile(url), CSVLoader);\nfor await (const batch of batchIterator) {\n  console.log(batch.length);\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"Handling errors"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:"try {\n  const response = await fetch(url); // fetch can throw in case of network errors\n  const data = await parse(response); // parse will throw if server reports an error\n} catch (error) {\n  console.log(error);\n}\n"})}),"\n",(0,n.jsx)(r.h2,{id:"functions",children:"Functions"}),"\n",(0,n.jsx)(r.h3,{id:"parsedata-response--arraybuffer--string-loaders-object--object-options-object--promiseany",children:"parse(data: Response | ArrayBuffer | String, loaders: Object | Object[], options?: Object) : Promise<Any>"}),"\n",(0,n.jsxs)(r.p,{children:["Parses data asynchronously either using the provided loader or loaders, or using the pre-registered loaders (see ",(0,n.jsx)(r.code,{children:"register-loaders"}),")."]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"data"}),": loaded data or an object that allows data to be loaded. This parameter can be any of the following types:"]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"Response"})," - response object returned by ",(0,n.jsx)(r.code,{children:"fetchFile"})," or ",(0,n.jsx)(r.code,{children:"fetch"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"ArrayBuffer"})," - Parse from binary data in an array buffer"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"String"})," - Parse from text data in a string. (Only works for loaders that support textual input)."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"Iterator"})," - Iterator that yeilds binary (",(0,n.jsx)(r.code,{children:"ArrayBuffer"}),") chunks or string chunks (string chunks only work for loaders that support textual input)."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"AsyncIterator"})," - iterator that yeilds promises that resolve to binary (",(0,n.jsx)(r.code,{children:"ArrayBuffer"}),") chunks or string chunks."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"ReadableStream"})," - A DOM or Node stream."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"File"})," - A browser file object (from drag-and-drop or file selection operations)."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"Promise"})," - A promise that resolves to any of the other supported data types can also be supplied."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"loaders"})," - can be a single loader or an array of loaders. If single loader is provided, will force to use it. If ommitted, will use the list of pre-registered loaders (see ",(0,n.jsx)(r.code,{children:"registerLoaders"}),")"]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"data"}),": loaded data or an object that allows data to be loaded. See table below for valid input types for this parameter."]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"loaders"})," - can be a single loader or an array of loaders. If ommitted, will use the list of pre-registered loaders (see ",(0,n.jsx)(r.code,{children:"registerLoaders"}),")"]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"options"}),": See ",(0,n.jsx)(r.a,{href:"./loader-options",children:(0,n.jsx)(r.code,{children:"LoaderOptions"})}),"."]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"url"}),": optional, assists in the autoselection of a loader if multiple loaders are supplied to ",(0,n.jsx)(r.code,{children:"loader"}),"."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Returns:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["Return value depends on the ",(0,n.jsx)(r.em,{children:"loader object"})," category"]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Notes:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["If multiple ",(0,n.jsx)(r.code,{children:"loaders"})," are provided (or pre-registered), an attempt will be made to autodetect which loader is appropriate for the file (using url extension and header matching)."]}),"\n"]}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Data Type"}),(0,n.jsx)(r.th,{children:"Description"}),(0,n.jsx)(r.th,{children:"Comments"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"Response"})}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"fetch"})," response object returned by e.g. ",(0,n.jsx)(r.code,{children:"fetchFile"})," or ",(0,n.jsx)(r.code,{children:"fetch"}),"."]}),(0,n.jsxs)(r.td,{children:["Data will be streamed from the ",(0,n.jsx)(r.code,{children:"response.body"})," stream."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"ArrayBuffer"})}),(0,n.jsx)(r.td,{children:"Parse from binary data in an array buffer"}),(0,n.jsx)(r.td,{})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"Parse from text data in a string."}),(0,n.jsx)(r.td,{children:"Only works for loaders that support textual input."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"converted into async iterators behind the scenes."}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"File"})}),(0,n.jsx)(r.td,{children:"A browser file object (from drag-and-drop or file selection operations)."}),(0,n.jsx)(r.td,{})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"Promise"})}),(0,n.jsx)(r.td,{children:"A promise that resolves to any of the other supported data types can also be supplied."}),(0,n.jsx)(r.td,{})]})]})]}),"\n",(0,n.jsxs)(r.p,{children:["| ",(0,n.jsx)(r.code,{children:"Iterator"})," | Iterator that yields binary (",(0,n.jsx)(r.code,{children:"ArrayBuffer"}),") chunks or string chunks | string chunks only work for loaders that support textual input. |\n| ",(0,n.jsx)(r.code,{children:"AsyncIterator"})," | iterator that yields promises that resolve to binary (",(0,n.jsx)(r.code,{children:"ArrayBuffer"}),") chunks or string chunks. |"]}),"\n",(0,n.jsxs)(r.p,{children:["Note that additional data types can be converted to ",(0,n.jsx)(r.code,{children:"Response"})," objects and used with ",(0,n.jsx)(r.code,{children:"parse"}),", e.g. with ",(0,n.jsx)(r.code,{children:"new Response(new FormData(...))"}),". See browser documentation for the ",(0,n.jsx)(r.code,{children:"Response"})," class for more details."]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},43023:(e,r,s)=>{s.d(r,{R:()=>a,x:()=>d});var n=s(63696);const t={},o=n.createContext(t);function a(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);