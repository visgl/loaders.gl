"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[3441],{54149:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>a});var i=n(62540),s=n(43023);const r={},d="FlatGeobuf",l={id:"modules/flatgeobuf/formats/flatgeobuf",title:"FlatGeobuf",description:"flatgeobuf-logo",source:"@site/../docs/modules/flatgeobuf/formats/flatgeobuf.md",sourceDirName:"modules/flatgeobuf/formats",slug:"/modules/flatgeobuf/formats/flatgeobuf",permalink:"/docs/modules/flatgeobuf/formats/flatgeobuf",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/flatgeobuf/formats/flatgeobuf.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"PLY - Polygon File Format",permalink:"/docs/modules/ply/formats/ply"},next:{title:"GeoJSON",permalink:"/docs/modules/json/formats/geojson"}},o={},a=[{value:"Characteristics",id:"characteristics",level:2},{value:"Geometries",id:"geometries",level:2},{value:"Schema",id:"schema",level:2},{value:"Metadata",id:"metadata",level:2},{value:"Spatial indexing",id:"spatial-indexing",level:2},{value:"Optimizing Remotely Hosted FlatGeobufs",id:"optimizing-remotely-hosted-flatgeobufs",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"flatgeobuf",children:"FlatGeobuf"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"flatgeobuf-logo",src:n(75401).A+"",width:"290",height:"80"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.em,{children:(0,i.jsx)(t.a,{href:"/docs/modules/flatgeobuf",children:(0,i.jsx)(t.code,{children:"@loaders.gl/flatgeobuf"})})})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.em,{children:(0,i.jsx)(t.a,{href:"http://flatgeobuf.org/",children:"FlatGeobuf"})})}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["FlatGeobuf is a binary (FlatBuffers-encoded) format that defines geospatial geometries. It is row-oriented rather than columnar like GeoParquet and GeoArrow and offers a different set of trade-offs.\nFlatGeobuf was inspired by ",(0,i.jsx)(t.a,{href:"https://github.com/mapbox/geobuf",children:"geobuf"})," and ",(0,i.jsx)(t.a,{href:"https://github.com/mourner/flatbush",children:"flatbush"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"characteristics",children:"Characteristics"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Binary"}),"\n",(0,i.jsx)(t.li,{children:"Row oriented"}),"\n",(0,i.jsx)(t.li,{children:"Supports appends, but not random writes"}),"\n",(0,i.jsx)(t.li,{children:"Optionally supports a spatial index"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Goals are to be suitable for large volumes of static data, significantly faster than legacy formats without size limitations for contents or meta information and to be suitable for streaming/random access."}),"\n",(0,i.jsx)(t.h2,{id:"geometries",children:"Geometries"}),"\n",(0,i.jsx)(t.p,{children:"FlatGeobuf supports any vector geometry type defined in the OGC Simple Features specification (the same feature types supported by the WKB 2D geometry type enumeration)."}),"\n",(0,i.jsx)(t.admonition,{type:"caution",children:(0,i.jsxs)(t.p,{children:["GeoBuf geometries include the standard building blocks of ",(0,i.jsx)(t.code,{children:"Point"}),", ",(0,i.jsx)(t.code,{children:"LineString"}),", ",(0,i.jsx)(t.code,{children:"Polygon"}),",",(0,i.jsx)(t.code,{children:"MultiPoint"}),", ",(0,i.jsx)(t.code,{children:"MultiLineString"}),", ",(0,i.jsx)(t.code,{children:"MultiPolygon"}),", and ",(0,i.jsx)(t.code,{children:"GeometryCollection"}),", but also includes more infrequently types such as ",(0,i.jsx)(t.code,{children:"CircularString"}),", ",(0,i.jsx)(t.code,{children:"Surface"}),", and `TIN`` (Triangulated irregular network). These additional types are not supported by loaders.gl."]})}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Value"}),(0,i.jsx)(t.th,{children:"loaders.gl"}),(0,i.jsx)(t.th,{children:"Comment"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Unknown"}),(0,i.jsx)(t.td,{children:"0"}),(0,i.jsx)(t.td,{children:"\u274c"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Point"}),(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"\u2705"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"LineString"}),(0,i.jsx)(t.td,{children:"2"}),(0,i.jsx)(t.td,{children:"\u2705"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Polygon"}),(0,i.jsx)(t.td,{children:"3"}),(0,i.jsx)(t.td,{children:"\u2705"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"MultiPoint"}),(0,i.jsx)(t.td,{children:"4"}),(0,i.jsx)(t.td,{children:"\u2705"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"MultiLineString"}),(0,i.jsx)(t.td,{children:"5"}),(0,i.jsx)(t.td,{children:"\u2705"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"MultiPolygon"}),(0,i.jsx)(t.td,{children:"6"}),(0,i.jsx)(t.td,{children:"\u2705"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GeometryCollection"}),(0,i.jsx)(t.td,{children:"7"}),(0,i.jsx)(t.td,{children:"\u2705"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"CircularString"}),(0,i.jsx)(t.td,{children:"8"}),(0,i.jsx)(t.td,{children:"\u274c"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"CompoundCurve"}),(0,i.jsx)(t.td,{children:"9"}),(0,i.jsx)(t.td,{children:"\u274c"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"CurvePolygon"}),(0,i.jsx)(t.td,{children:"10"}),(0,i.jsx)(t.td,{children:"\u274c"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"MultiCurve"}),(0,i.jsx)(t.td,{children:"11"}),(0,i.jsx)(t.td,{children:"\u274c"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"MultiSurface"}),(0,i.jsx)(t.td,{children:"12"}),(0,i.jsx)(t.td,{children:"\u274c"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Curve"}),(0,i.jsx)(t.td,{children:"13"}),(0,i.jsx)(t.td,{children:"\u274c"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Surface"}),(0,i.jsx)(t.td,{children:"14"}),(0,i.jsx)(t.td,{children:"\u274c"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"PolyhedralSurface"}),(0,i.jsx)(t.td,{children:"15"}),(0,i.jsx)(t.td,{children:"\u274c"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TIN"}),(0,i.jsx)(t.td,{children:"16"}),(0,i.jsx)(t.td,{children:"\u274c"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Triangle"}),(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"\u274c"}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"Note: Storing only geometries with the same type allows readers to know which geometry type is stored without scanning the entire file."}),"\n",(0,i.jsx)(t.h2,{id:"schema",children:"Schema"}),"\n",(0,i.jsx)(t.p,{children:"Apart from geometry, FlatGeobuf supports columns with a range of types:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Byte"})}),(0,i.jsx)(t.td,{children:"Signed 8-bit integer"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"UByte"})}),(0,i.jsx)(t.td,{children:"Unsigned 8-bit integer"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Bool"})}),(0,i.jsx)(t.td,{children:"Boolean"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Short"})}),(0,i.jsx)(t.td,{children:"Signed 16-bit integer"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"UShort"})}),(0,i.jsx)(t.td,{children:"Unsigned 16-bit integer"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Int"})}),(0,i.jsx)(t.td,{children:"Signed 32-bit integer"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"UInt"})}),(0,i.jsx)(t.td,{children:"Unsigned 32-bit integer"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Long"})}),(0,i.jsx)(t.td,{children:"Signed 64-bit integer"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"ULong"})}),(0,i.jsx)(t.td,{children:"Unsigned 64-bit integer"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Float"})}),(0,i.jsx)(t.td,{children:"Single precision floating point number"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Double"})}),(0,i.jsx)(t.td,{children:"Double precision floating point number"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"String"})}),(0,i.jsx)(t.td,{children:"UTF8 string"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Json"})}),(0,i.jsx)(t.td,{children:"General JSON type intended to be application specific"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"DateTime"})}),(0,i.jsx)(t.td,{children:"ISO 8601 date time"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Binary"})}),(0,i.jsx)(t.td,{children:"General binary type intended to be application specific"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"metadata",children:"Metadata"}),"\n",(0,i.jsx)(t.admonition,{type:"caution",children:(0,i.jsx)(t.p,{children:"loaders.gl currently does not currently expose all metadata."})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"type Header {\n  name: string;                 // Dataset name\n  envelope: [double];           // Bounds\n  geometry_type: GeometryType;  // Geometry type (should be set to Unknown if per feature geometry type)\n  has_z: bool = false;           // Does geometry have Z dimension?\n  has_m: bool = false;           // Does geometry have M dimension?\n  has_t: bool = false;           // Does geometry have T dimension?\n  has_tm: bool = false;          // Does geometry have TM dimension?\n  columns: [Column];            // Attribute columns schema (can be omitted if per feature schema)\n  features_count: ulong;        // Number of features in the dataset (0 = unknown)\n  index_node_size: ushort = 16; // Index node size (0 = no index)\n  crs: Crs;                     // Spatial Reference System\n  title: string;                // Dataset title\n  description: string;          // Dataset description (intended for free form long text)\n  metadata: string;             // Dataset metadata (intended to be application specific and suggested to be structured fx. JSON)\n}\n\ntype Crs {\n  org: string;                  // Case-insensitive name of the defining organization e.g. EPSG or epsg (NULL = EPSG)\n  code: int;                    // Numeric ID of the Spatial Reference System assigned by the organization (0 = unknown)\n  name: string;                 // Human readable name of this SRS\n  description: string;          // Human readable description of this SRS\n  wkt: string;                  // Well-known Text Representation of the Spatial Reference System\n  code_string: string;          // Text ID of the Spatial Reference System assigned by the organization in the (rare) case when it is not an integer and thus cannot be set into code\n}\n\ntype Column {\n  name: string (required);      // Column name\n  type: ColumnType;             // Column type\n  title: string;                // Column title\n  description: string;          // Column description (intended for free form long text)\n  width: int = -1;              // Column values expected width (-1 = unknown) (currently only used to indicate the number of characters in strings)\n  precision: int = -1;          // Column values expected precision (-1 = unknown) as defined by SQL\n  scale: int = -1;              // Column values expected scale (-1 = unknown) as defined by SQL\n  nullable: bool = true;        // Column values expected nullability\n  unique: bool = false;         // Column values expected uniqueness\n  primary_key: bool = false;    // Indicates this column has been (part of) a primary key\n  metadata: string;             // Column metadata (intended to be application specific and suggested to be structured fx. JSON)\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"Each column also has a string that can hold arbitrary metadata."}),"\n",(0,i.jsx)(t.h2,{id:"spatial-indexing",children:"Spatial indexing"}),"\n",(0,i.jsx)(t.admonition,{type:"caution",children:(0,i.jsx)(t.p,{children:"loaders.gl currently does not support spatial filtering."})}),"\n",(0,i.jsx)(t.p,{children:"FlatGeobuf files can optionally contain a spatial index. The spatial index is optional to allow the format to be efficiently written as a stream, support appending, and for use cases where spatial filtering is not needed."}),"\n",(0,i.jsxs)(t.p,{children:["The spatial index clusters the data on a ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Hilbert_R-tree#Packed_Hilbert_R-trees",children:"packed Hilbert R-Tree"})," enabling fast bounding box spatial filtering."]}),"\n",(0,i.jsx)(t.p,{children:"The Hilbert curve imposes a linear ordering on the data rectangles and then traverses the sorted list, assigning each set of C rectangles to a node in the R-tree. The final result is that the set of data rectangles on the same node will be close to each other in the linear order."}),"\n",(0,i.jsx)(t.h3,{id:"optimizing-remotely-hosted-flatgeobufs",children:"Optimizing Remotely Hosted FlatGeobufs"}),"\n",(0,i.jsx)(t.p,{children:"If you\u2019re accessing a FlatGeobuf file over HTTP, consider using a CDN to minimize latency."}),"\n",(0,i.jsx)(t.p,{children:"In particular, when using the spatial filter to get a subset of features, multiple requests will be made. Often round-trip latency, rather than throughput, is the limiting factor. A caching CDN can be especially helpful here."}),"\n",(0,i.jsx)(t.p,{children:"Fetching a subset of a file over HTTP utilizes Range requests. If the page accessing the FGB is hosted on a different domain from the CDN, Cross Origin policy applies, and the required Range header will induce an OPTIONS (preflight) request."}),"\n",(0,i.jsx)(t.p,{children:"Popular CDNs, like Cloudfront, support Range Requests, but don\u2019t cache the requisite preflight OPTIONS requests by default. Consider enabling OPTIONS request caching . Without this, the preflight authorization request could be much slower than necessary."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},75401:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/flatgeobuf-logo-c40c79d57066b1c4cec560a768d7d412.png"},43023:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>l});var i=n(63696);const s={},r=i.createContext(s);function d(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);