"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[2008],{96741:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>o,frontMatter:()=>s,metadata:()=>i,toc:()=>h});var t=r(62540),d=r(43023);const s={},c="Chunked",i={id:"arrowjs/api-reference/vector-chunked",title:"Chunked",description:"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +.",source:"@site/../docs/arrowjs/api-reference/vector-chunked.md",sourceDirName:"arrowjs/api-reference",slug:"/arrowjs/api-reference/vector-chunked",permalink:"/docs/arrowjs/api-reference/vector-chunked",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/arrowjs/api-reference/vector-chunked.md",tags:[],version:"current",frontMatter:{}},l={},h=[{value:"Usage",id:"usage",level:2},{value:"Inheritance",id:"inheritance",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"Chunked.flatten(...vectors: Vector[]) : Vector",id:"chunkedflattenvectors-vector--vector",level:3},{value:"Chunked.concat(...chunks: <code>Vector&lt;T&gt;[]</code>): Chunked",id:"chunkedconcatchunks-vectort-chunked",level:3},{value:"Members",id:"members",level:2},{value:"<code>Symbol.iterator : Iterator</code>",id:"symboliterator--iterator",level:3},{value:"<code>type : T</code>",id:"type--t",level:3},{value:"<code>length: Number </code> (read-only)",id:"length-number--read-only",level:3},{value:"chunks: Vector[] (read-only)",id:"chunks-vector-read-only",level:3},{value:"typeId : TBD (read-only)",id:"typeid--tbd-read-only",level:3},{value:"data : Data (read-only)",id:"data--data-read-only",level:3},{value:"ArrayType (read-only)",id:"arraytype-read-only",level:3},{value:"numChildren (read-only)",id:"numchildren-read-only",level:3},{value:"stride (read-only)",id:"stride-read-only",level:3},{value:"nullCount (read-only)",id:"nullcount-read-only",level:3},{value:"indices : <code>ChunkedKeys&lt;T&gt;</code> | null (read-only)",id:"indices--chunkedkeyst--null-read-only",level:3},{value:"dictionary: ChunkedDict | null (read-only)",id:"dictionary-chunkeddict--null-read-only",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor(type : *, chunks? : Vector[] = [], offsets? : Number[])",id:"constructortype---chunks--vector---offsets--number",level:3},{value:"clone(chunks? : this.chunks): Chunked",id:"clonechunks--thischunks-chunked",level:3},{value:"concat(...others: <code>Vector&lt;T&gt;[]</code>): Chunked",id:"concatothers-vectort-chunked",level:3},{value:"slice(begin?: Number, end?: Number): Chunked",id:"slicebegin-number-end-number-chunked",level:3},{value:"getChildAt(index : Number): Chunked | null",id:"getchildatindex--number-chunked--null",level:3},{value:"search(index: Number): [number, number] | null;",id:"searchindex-number-number-number--null",level:3},{value:"search(index: Number, then?: SearchContinuation): <code>ReturnType&lt;N&gt;</code>;",id:"searchindex-number-then-searchcontinuation-returntypen",level:3},{value:"search(index: Number, then?: SearchContinuation)",id:"searchindex-number-then-searchcontinuation",level:3},{value:"isValid(index: Number): boolean",id:"isvalidindex-number-boolean",level:3},{value:"get(index : Number): T[&#39;TValue&#39;] | null",id:"getindex--number-ttvalue--null",level:3},{value:"set(index: Number, value: T[&#39;TValue&#39;] | null): void",id:"setindex-number-value-ttvalue--null-void",level:3},{value:"indexOf(element: Type, offset?: Number): Number",id:"indexofelement-type-offset-number-number",level:3},{value:"toArray(): TypedArray",id:"toarray-typedarray",level:3}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"chunked",children:"Chunked"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"This documentation reflects Arrow JS v4.0. Needs to be updated for the new Arrow API in v9.0 +."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:['Holds a "chunked array" that allows a number of array fragments (represented by ',(0,t.jsx)(n.code,{children:"Vector"})," instances) to be treated logically as a single vector. ",(0,t.jsx)(n.code,{children:"Vector"})," instances can be concatenated into a ",(0,t.jsx)(n.code,{children:"Chunked"})," without any memory being copied."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(n.p,{children:["Create a new contiguous typed array from a ",(0,t.jsx)(n.code,{children:"Chunked"})," instance (note that this creates a new typed array unless only one chunk)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const typedArray = chunked.toArray();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"Chunked"})," array supports iteration, random element access and mutation."]}),"\n",(0,t.jsx)(n.h2,{id:"inheritance",children:"Inheritance"}),"\n",(0,t.jsxs)(n.p,{children:["class Chunked extends ",(0,t.jsx)(n.a,{href:"/docs/arrowjs/api-reference/vector",children:"Vector"})]}),"\n",(0,t.jsx)(n.h2,{id:"static-methods",children:"Static Methods"}),"\n",(0,t.jsx)(n.h3,{id:"chunkedflattenvectors-vector--vector",children:"Chunked.flatten(...vectors: Vector[]) : Vector"}),"\n",(0,t.jsx)("p",{class:"badges",children:(0,t.jsx)("img",{src:"https://img.shields.io/badge/zero-copy-green.svg?style=flat-square",alt:"zero-copy"})}),"\n",(0,t.jsxs)(n.p,{children:["Utility method that flattens a number of ",(0,t.jsx)(n.code,{children:"Vector"})," instances or Arrays of ",(0,t.jsx)(n.code,{children:"Vector"})," instances into a single Array of ",(0,t.jsx)(n.code,{children:"Vector"})," instances. If the incoming Vectors are instances of ",(0,t.jsx)(n.code,{children:"Chunked"}),", the child chunks are extracted and flattened into the resulting Array. Does not mutate or copy data from the Vector instances."]}),"\n",(0,t.jsxs)(n.p,{children:["Returns an Array of ",(0,t.jsx)(n.code,{children:"Vector"})," instances."]}),"\n",(0,t.jsxs)(n.h3,{id:"chunkedconcatchunks-vectort-chunked",children:["Chunked.concat(...chunks: ",(0,t.jsx)(n.code,{children:"Vector<T>[]"}),"): Chunked"]}),"\n",(0,t.jsx)("p",{class:"badges",children:(0,t.jsx)("img",{src:"https://img.shields.io/badge/zero-copy-green.svg?style=flat-square",alt:"zero-copy"})}),"\n",(0,t.jsxs)(n.p,{children:["Concatenates a number of ",(0,t.jsx)(n.code,{children:"Vector"})," instances of the same type into a single ",(0,t.jsx)(n.code,{children:"Chunked"})," Vector. Returns a new ",(0,t.jsx)(n.code,{children:"Chunked"})," Vector."]}),"\n",(0,t.jsxs)(n.p,{children:["Note: This method extracts the inner chunks of any incoming ",(0,t.jsx)(n.code,{children:"Chunked"})," instances, and flattens them into the ",(0,t.jsx)(n.code,{children:"chunks"})," array of the returned ",(0,t.jsx)(n.code,{children:"Chunked"})," Vector."]}),"\n",(0,t.jsx)(n.h2,{id:"members",children:"Members"}),"\n",(0,t.jsx)(n.h3,{id:"symboliterator--iterator",children:(0,t.jsx)(n.code,{children:"Symbol.iterator : Iterator"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Chunked"})," arrays are iterable, allowing you to use constructs like ",(0,t.jsx)(n.code,{children:"for (const element of chunked)"})," to iterate over elements. For in-order traversal, this is more performant than random-element access."]}),"\n",(0,t.jsx)(n.h3,{id:"type--t",children:(0,t.jsx)(n.code,{children:"type : T"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns the DataType instance which determines the type of elements this ",(0,t.jsx)(n.code,{children:"Chunked"})," instance contains. All vector chunks will have this type."]}),"\n",(0,t.jsxs)(n.h3,{id:"length-number--read-only",children:[(0,t.jsx)(n.code,{children:"length: Number "})," (read-only)"]}),"\n",(0,t.jsxs)(n.p,{children:["Returns the total number of elements in this ",(0,t.jsx)(n.code,{children:"Chunked"})," instance, representing the length of of all chunks."]}),"\n",(0,t.jsx)(n.h3,{id:"chunks-vector-read-only",children:"chunks: Vector[] (read-only)"}),"\n",(0,t.jsxs)(n.p,{children:["Returns an array of the ",(0,t.jsx)(n.code,{children:"Vector"})," chunks that hold the elements in this ",(0,t.jsx)(n.code,{children:"Chunked"})," array."]}),"\n",(0,t.jsx)(n.h3,{id:"typeid--tbd-read-only",children:"typeId : TBD (read-only)"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"typeId"})," enum value of the ",(0,t.jsx)(n.code,{children:"type"})," instance"]}),"\n",(0,t.jsx)(n.h3,{id:"data--data-read-only",children:"data : Data (read-only)"}),"\n",(0,t.jsxs)(n.p,{children:["Returns the ",(0,t.jsx)(n.code,{children:"Data"})," instance of the ",(0,t.jsx)(n.em,{children:"first"})," chunk in the list of inner Vectors."]}),"\n",(0,t.jsx)(n.h3,{id:"arraytype-read-only",children:"ArrayType (read-only)"}),"\n",(0,t.jsx)(n.p,{children:"Returns the constructor of the underlying typed array for the values buffer as determined by this Vector's DataType."}),"\n",(0,t.jsx)(n.h3,{id:"numchildren-read-only",children:"numChildren (read-only)"}),"\n",(0,t.jsx)(n.p,{children:"The number of logical Vector children for the Chunked Vector. Only applicable if the DataType of the Vector is one of the nested types (List, FixedSizeList, Struct, or Map)."}),"\n",(0,t.jsx)(n.h3,{id:"stride-read-only",children:"stride (read-only)"}),"\n",(0,t.jsx)(n.p,{children:"The number of elements in the underlying data buffer that constitute a single logical value for the given type. The stride for all DataTypes is 1 unless noted here:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["For ",(0,t.jsx)(n.code,{children:"Decimal"})," types, the stride is 4."]}),"\n",(0,t.jsxs)(n.li,{children:["For ",(0,t.jsx)(n.code,{children:"Date"})," types, the stride is 1 if the ",(0,t.jsx)(n.code,{children:"unit"})," is DateUnit.DAY, else 2."]}),"\n",(0,t.jsxs)(n.li,{children:["For ",(0,t.jsx)(n.code,{children:"Int"}),", ",(0,t.jsx)(n.code,{children:"Interval"}),", or ",(0,t.jsx)(n.code,{children:"Time"})," types, the stride is 1 if ",(0,t.jsx)(n.code,{children:"bitWidth <= 32"}),", else 2."]}),"\n",(0,t.jsxs)(n.li,{children:["For ",(0,t.jsx)(n.code,{children:"FixedSizeList"})," types, the stride is the ",(0,t.jsx)(n.code,{children:"listSize"})," property of the ",(0,t.jsx)(n.code,{children:"FixedSizeList"})," instance."]}),"\n",(0,t.jsxs)(n.li,{children:["For ",(0,t.jsx)(n.code,{children:"FixedSizeBinary"})," types, the stride is the ",(0,t.jsx)(n.code,{children:"byteWidth"})," property of the ",(0,t.jsx)(n.code,{children:"FixedSizeBinary"})," instance."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"nullcount-read-only",children:"nullCount (read-only)"}),"\n",(0,t.jsx)(n.p,{children:"Number of null values across all Vector chunks in this chunked array."}),"\n",(0,t.jsxs)(n.h3,{id:"indices--chunkedkeyst--null-read-only",children:["indices : ",(0,t.jsx)(n.code,{children:"ChunkedKeys<T>"})," | null (read-only)"]}),"\n",(0,t.jsxs)(n.p,{children:["If this is a dictionary encoded column, returns a ",(0,t.jsx)(n.code,{children:"Chunked"})," instance of the indicies of all the inner chunks. Otherwise, returns ",(0,t.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"dictionary-chunkeddict--null-read-only",children:"dictionary: ChunkedDict | null (read-only)"}),"\n",(0,t.jsx)(n.p,{children:"If this is a dictionary encoded column, returns the Dictionary."}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"constructortype---chunks--vector---offsets--number",children:"constructor(type : *, chunks? : Vector[] = [], offsets? : Number[])"}),"\n",(0,t.jsx)("p",{class:"badges",children:(0,t.jsx)("img",{src:"https://img.shields.io/badge/zero-copy-green.svg?style=flat-square",alt:"zero-copy"})}),"\n",(0,t.jsxs)(n.p,{children:["Creates a new ",(0,t.jsx)(n.code,{children:"Chunked"})," array instance of the given ",(0,t.jsx)(n.code,{children:"type"})," and optionally initializes it with a list of ",(0,t.jsx)(n.code,{children:"Vector"})," instances."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"type"})," - The DataType of the inner chunks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"chunks"}),"= - Vectors must all be compatible with ",(0,t.jsx)(n.code,{children:"type"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"offsets"}),"= - A Uint32Array of offsets where each inner chunk starts and ends. If not provided, offsets are automatically calculated from the list of chunks."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["TBD - Confirm/provide some information on how ",(0,t.jsx)(n.code,{children:"offsets"})," can be used?"]}),"\n",(0,t.jsx)(n.h3,{id:"clonechunks--thischunks-chunked",children:"clone(chunks? : this.chunks): Chunked"}),"\n",(0,t.jsx)("p",{class:"badges",children:(0,t.jsx)("img",{src:"https://img.shields.io/badge/zero-copy-green.svg?style=flat-square",alt:"zero-copy"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns a new ",(0,t.jsx)(n.code,{children:"Chunked"})," instance that is a clone of this instance. Does not copy the actual chunks, so the new ",(0,t.jsx)(n.code,{children:"Chunked"})," instance will reference the same chunks."]}),"\n",(0,t.jsxs)(n.h3,{id:"concatothers-vectort-chunked",children:["concat(...others: ",(0,t.jsx)(n.code,{children:"Vector<T>[]"}),"): Chunked"]}),"\n",(0,t.jsx)("p",{class:"badges",children:(0,t.jsx)("img",{src:"https://img.shields.io/badge/zero-copy-green.svg?style=flat-square",alt:"zero-copy"})}),"\n",(0,t.jsxs)(n.p,{children:["Concatenates a number of ",(0,t.jsx)(n.code,{children:"Vector"})," instances after the chunks. Returns a new ",(0,t.jsx)(n.code,{children:"Chunked"})," array."]}),"\n",(0,t.jsxs)(n.p,{children:["The supplied ",(0,t.jsx)(n.code,{children:"Vector"})," chunks must be the same DataType as the ",(0,t.jsx)(n.code,{children:"Chunked"})," instance."]}),"\n",(0,t.jsx)(n.h3,{id:"slicebegin-number-end-number-chunked",children:"slice(begin?: Number, end?: Number): Chunked"}),"\n",(0,t.jsx)(n.p,{children:"Returns a new chunked array representing the logical array containing the elements within the index range, potentially dropping some chunks at beginning and end."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"begin"}),"=",(0,t.jsx)(n.code,{children:"0"})," - The first logical index to be included as index 0 in the new array."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"end"})," - The first logical index to be included as index 0 in the new array. Defaults to the last element in the range."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Returns a zero-copy slice of this Vector. The begin and end arguments are handled the same way as JS' ",(0,t.jsx)(n.code,{children:"Array.prototype.slice"}),"; they are clamped between 0 and ",(0,t.jsx)(n.code,{children:"vector.length"})," and wrap around when negative, e.g. ",(0,t.jsx)(n.code,{children:"slice(-1, 5)"})," or ",(0,t.jsx)(n.code,{children:"slice(5, -1)"})]}),"\n",(0,t.jsx)(n.h3,{id:"getchildatindex--number-chunked--null",children:"getChildAt(index : Number): Chunked | null"}),"\n",(0,t.jsxs)(n.p,{children:["If this ",(0,t.jsx)(n.code,{children:"Chunked"})," Vector's DataType is one of the nested types (Map or Struct), returns a ",(0,t.jsx)(n.code,{children:"Chunked"})," Vector view over all the chunks for the child Vector at ",(0,t.jsx)(n.code,{children:"index"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"searchindex-number-number-number--null",children:"search(index: Number): [number, number] | null;"}),"\n",(0,t.jsxs)(n.h3,{id:"searchindex-number-then-searchcontinuation-returntypen",children:["search(index: Number, then?: SearchContinuation): ",(0,t.jsx)(n.code,{children:"ReturnType<N>"}),";"]}),"\n",(0,t.jsx)(n.h3,{id:"searchindex-number-then-searchcontinuation",children:"search(index: Number, then?: SearchContinuation)"}),"\n",(0,t.jsxs)(n.p,{children:["Using an ",(0,t.jsx)(n.code,{children:"index"})," that is relative to the whole ",(0,t.jsx)(n.code,{children:"Chunked"}),' Vector, binary search through the list of inner chunks using supplied "global" ',(0,t.jsx)(n.code,{children:"index"})," to find the chunk at that location. Returns the child index of the inner chunk and an element index that has been adjusted to the keyspace of the found inner chunk."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"search()"})," can be called with only an integer index, in which case a pair of ",(0,t.jsx)(n.code,{children:"[chunkIndex, valueIndex]"})," are returned as a two-element Array:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"let chunked = [Int32Vector.from([0, 1, 2, 3]), Int32Vector.from([4, 5, 6, 7, 8])].reduce((x, y) =>\n  x.concat(y)\n);\n\nlet [chunkIndex, valueIndex] = chunked.search(6);\nassert(chunkIndex === 1);\nassert(valueIndex === 3);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"search()"})," is called with an integer index and a callback, the callback will be invoked with the ",(0,t.jsx)(n.code,{children:"Chunked"})," instance as the first argument, then the ",(0,t.jsx)(n.code,{children:"chunkIndex"})," and ",(0,t.jsx)(n.code,{children:"valueIndex"})," as the second and third arguments:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"let getChildValue = (parent, childIndex, valueIndex) =>\n    chunked.chunks[childIndex].get(valueIndex);\nlet childValue = chunked.search(6, (chunked, childIndex, valueIndex) => )\n"})}),"\n",(0,t.jsx)(n.h3,{id:"isvalidindex-number-boolean",children:"isValid(index: Number): boolean"}),"\n",(0,t.jsxs)(n.p,{children:["Checks if the element at ",(0,t.jsx)(n.code,{children:"index"})," in the logical array is valid."]}),"\n",(0,t.jsxs)(n.p,{children:["Checks the null map (if present) to determine if the value in the logical ",(0,t.jsx)(n.code,{children:"index"})," is included."]}),"\n",(0,t.jsx)(n.h3,{id:"getindex--number-ttvalue--null",children:"get(index : Number): T['TValue'] | null"}),"\n",(0,t.jsxs)(n.p,{children:["Returns the element at ",(0,t.jsx)(n.code,{children:"index"})," in the logical array, or ",(0,t.jsx)(n.code,{children:"null"})," if no such element exists (e.e.g if ",(0,t.jsx)(n.code,{children:"index"})," is out of range)."]}),"\n",(0,t.jsx)(n.h3,{id:"setindex-number-value-ttvalue--null-void",children:"set(index: Number, value: T['TValue'] | null): void"}),"\n",(0,t.jsxs)(n.p,{children:["Writes the given ",(0,t.jsx)(n.code,{children:"value"})," at the provided ",(0,t.jsx)(n.code,{children:"index"}),". If the value is null, the null bitmap is updated."]}),"\n",(0,t.jsx)(n.h3,{id:"indexofelement-type-offset-number-number",children:"indexOf(element: Type, offset?: Number): Number"}),"\n",(0,t.jsxs)(n.p,{children:["Returns the index of the first occurrence of ",(0,t.jsx)(n.code,{children:"element"}),", or ",(0,t.jsx)(n.code,{children:"-1"})," if the value was not found."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"offset"})," - the index to start searching from."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"toarray-typedarray",children:"toArray(): TypedArray"}),"\n",(0,t.jsx)(n.p,{children:'Returns a single contiguous typed array containing data in all the chunks (effectively "flattening" the chunks.'}),"\n",(0,t.jsx)(n.p,{children:"Notes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Calling this function creates a new typed array unless there is only one chunk."}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},43023:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>i});var t=r(63696);const d={},s=t.createContext(d);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);