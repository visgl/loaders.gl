"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[6375],{24898:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=n(74848),t=n(28453);const i={},s="geojsonToBinary",a={id:"modules/gis/api-reference/geojson-to-binary",title:"geojsonToBinary",description:"Helper function to transform an array of GeoJSON Features into binary typed",source:"@site/../docs/modules/gis/api-reference/geojson-to-binary.md",sourceDirName:"modules/gis/api-reference",slug:"/modules/gis/api-reference/geojson-to-binary",permalink:"/docs/modules/gis/api-reference/geojson-to-binary",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/gis/api-reference/geojson-to-binary.md",tags:[],version:"current",frontMatter:{}},d={},c=[{value:"Usage",id:"usage",level:2},{value:"Outputs",id:"outputs",level:2},{value:"Options",id:"options",level:2},{value:"Notes",id:"notes",level:2}];function l(e){const r={code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h1,{id:"geojsontobinary",children:"geojsonToBinary"}),"\n",(0,o.jsxs)(r.p,{children:["Helper function to transform an array of GeoJSON ",(0,o.jsx)(r.code,{children:"Feature"}),"s into binary typed\narrays. This is designed to speed up geospatial loaders by removing the need for\nserialization and deserialization of data transferred by the worker back to the\nmain process."]}),"\n",(0,o.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"import {load} from '@loaders.gl/core';\nimport {JSONLoader} from '@loaders.gl/json';\nimport {geojsonToBinary} from '@loaders.gl/gis';\n\nconst geoJSONfeatures = await load('data.geojson', JSONLoader);\n\n// See table below for full list of options\nconst options = {PositionDataType: Float32Array};\nconst binaryFeatures = geojsonToBinary(geoJSONfeatures, options);\n"})}),"\n",(0,o.jsx)(r.h2,{id:"outputs",children:"Outputs"}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.code,{children:"geojsonToBinary"})," returns an object containing typed arrays sorted by geometry\ntype. ",(0,o.jsx)(r.code,{children:"positions"})," is a flat array of coordinates; ",(0,o.jsx)(r.code,{children:"globalFeatureIds"})," references\nindices in the original ",(0,o.jsx)(r.code,{children:"features"})," array; ",(0,o.jsx)(r.code,{children:"featureIds"})," references feature\nindices of the same geometry type; ",(0,o.jsx)(r.code,{children:"numericProps"})," contains ",(0,o.jsx)(r.code,{children:"TypedArray"}),"s\ngenerated from numeric feature properties; ",(0,o.jsx)(r.code,{children:"properties"})," is an array of\nnon-numeric property objects of the given geometry type."]}),"\n",(0,o.jsxs)(r.p,{children:["Each ",(0,o.jsx)(r.code,{children:"TypedArray"})," is wrapped inside an ",(0,o.jsx)(r.em,{children:"accessor object"}),", where ",(0,o.jsx)(r.code,{children:".value"})," contains the raw numeric data, and ",(0,o.jsx)(r.code,{children:".size"})," gives the number of values per vertex. For example,"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"positions: {value: Float32Array, size: 3}\n"})}),"\n",(0,o.jsx)(r.p,{children:"corresponds to 3D coordinates, where each vertex is defined by three numbers."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"{\n  points: {\n    // Array of x, y or x, y, z positions\n    positions: {value: PositionDataType, size: 3},\n    // Array of original feature indexes by vertex\n    globalFeatureIds: {value: Uint16Array | Uint32Array, size: 1},\n    // Array of Point feature indexes by vertex\n    featureIds: {value: Uint16Array | Uint32Array, size: 1},\n    // Object with accessor objects for numeric properties\n    // Numeric properties are sized to have one value per vertex\n    numericProps: {\n        numericProperty1: {value: Float32Array | Float64Array, size: 1}\n    }\n    // Array of objects with non-numeric properties from Point geometries\n    properties: [{PointFeatureProperties}],\n    // Non-standard top-level fields\n    fields?: [{\n      // Feature ids of source data (if present)\n      id?: string | number\n    }]\n  },\n  lines: {\n    // Array of x, y or x, y, z positions\n    positions: {value: PositionDataType, size: 3},\n    // Indices within positions of the start of each individual LineString\n    pathIndices: {value: Uint16Array | Uint32Array, size: 1},\n    // Array of original feature indexes by vertex\n    globalFeatureIds: {value: Uint16Array | Uint32Array, size: 1},\n    // Array of LineString feature indexes by vertex\n    featureIds: {value: Uint16Array | Uint32Array, size: 1},\n    // Object with accessor objects for numeric properties\n    // Numeric properties are sized to have one value per vertex\n    numericProps: {\n        numericProperty1: {value: Float32Array | Float64Array, size: 1}\n    }\n    // Array of objects with non-numeric properties from LineString geometries\n    properties: [{LineStringFeatureProperties}],\n    // Non-standard top-level fields\n    fields?: [{\n      // Feature ids of source data (if present)\n      id?: string | number\n    }]\n  },\n  polygons: {\n    // Array of x, y or x, y, z positions\n    positions: {value: PositionDataType, size: 3},\n    // Indices within positions of the start of each complex Polygon\n    polygonIndices: {value: Uint16Array | Uint32Array, size: 1},\n    // Indices within positions of the start of each primitive Polygon/ring\n    primitivePolygonIndices: {value: Uint16Array | Uint32Array, size: 1},\n    // Triangle indices. Allows deck.gl to skip performing costly triangulation on main thread. Not present if `options.triangulate` is `false`\n    triangles?: {value: Uint32Array, size: 1},\n    // Array of original feature indexes by vertex\n    globalFeatureIds: {value: Uint16Array | Uint32Array, size: 1},\n    // Array of Polygon feature indexes by vertex\n    featureIds: {value: Uint16Array | Uint32Array, size: 1},\n    // Object with accessor objects for numeric properties\n    // Numeric properties are sized to have one value per vertex\n    numericProps: {\n        numericProperty1: {value: Float32Array | Float64Array, size: 1}\n    }\n    // Array of objects with non-numeric properties from Polygon geometries\n    properties: [{PolygonFeatureProperties}],\n    // Non-standard top-level fields\n    fields?: [{\n      // Feature ids of source data (if present)\n      id?: string | number\n    }]\n  }\n}\n"})}),"\n",(0,o.jsx)(r.h2,{id:"options",children:"Options"}),"\n",(0,o.jsxs)(r.table,{children:[(0,o.jsx)(r.thead,{children:(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.th,{children:"Option"}),(0,o.jsx)(r.th,{children:"Type"}),(0,o.jsx)(r.th,{children:"Default"}),(0,o.jsx)(r.th,{children:"Description"})]})}),(0,o.jsxs)(r.tbody,{children:[(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"fixRingWinding"}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.code,{children:"Boolean"})}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.code,{children:"true"})}),(0,o.jsxs)(r.td,{children:["Whether to fix incorrect ring winding for polygons. Valid ",(0,o.jsx)(r.code,{children:"GeoJSON"})," polygons have the outer ring coordinates in CCW order and with holes in CW order"]})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"numericPropKeys"}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.code,{children:"Array"})}),(0,o.jsx)(r.td,{children:"Derived from data"}),(0,o.jsxs)(r.td,{children:["Names of feature properties that should be converted to numeric ",(0,o.jsx)(r.code,{children:"TypedArray"}),"s. Passing ",(0,o.jsx)(r.code,{children:"[]"})," will force all properties to be returned as normal objects."]})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"PositionDataType"}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.code,{children:"class"})}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.code,{children:"Float32Array"})}),(0,o.jsx)(r.td,{children:"Data type used for positions arrays."})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"triangulate"}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.code,{children:"Boolean"})}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.code,{children:"true"})}),(0,o.jsx)(r.td,{children:"Whether polygons are broken into triangles as part of the conversion (generally required for GPU rendering)"})]})]})]}),"\n",(0,o.jsx)(r.h2,{id:"notes",children:"Notes"}),"\n",(0,o.jsx)(r.p,{children:"In the case of the source geoJson features having an object as a property, it would not be deep cloned, so it would be linked from the output object (be careful on further mutations)."}),"\n",(0,o.jsxs)(r.p,{children:["Triangulation of polygons can be time consuming. If not needed, set the ",(0,o.jsx)(r.code,{children:"triangulate"})," option to ",(0,o.jsx)(r.code,{children:"false"}),"."]})]})}function p(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>a});var o=n(96540);const t={},i=o.createContext(t);function s(e){const r=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(i.Provider,{value:r},e.children)}}}]);