"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[8833],{21492:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=n(74848),i=n(28453);const o={},s="PLY - Polygon File Format",l={id:"modules/ply/formats/ply",title:"PLY - Polygon File Format",description:"- @loaders.gl/ply",source:"@site/../docs/modules/ply/formats/ply.md",sourceDirName:"modules/ply/formats",slug:"/modules/ply/formats/ply",permalink:"/docs/modules/ply/formats/ply",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/ply/formats/ply.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"PCD - Point Cloud Data",permalink:"/docs/modules/pcd/formats/pcd"},next:{title:"FlatGeobuf",permalink:"/docs/modules/flatgeobuf/formats/flatgeobuf"}},a={},d=[{value:"Columns",id:"columns",level:2},{value:"Detailed File Structure",id:"detailed-file-structure",level:2},{value:"Example File",id:"example-file",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"ply---polygon-file-format",children:"PLY - Polygon File Format"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.em,{children:(0,r.jsx)(t.a,{href:"/docs/modules/ply",children:(0,r.jsx)(t.code,{children:"@loaders.gl/ply"})})})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.em,{children:(0,r.jsx)(t.a,{href:"http://paulbourke.net/dataformats/ply/",children:"PLY documentation"})})}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"PLY (Polygon File Format, also known as the Stanford Triangle Format) is a format for storing graphical objects that are described as a collection of polygons."}),"\n",(0,r.jsx)(t.p,{children:"The PLY format has two sub-formats: an ASCII representation for easily getting started, and a binary version for compact storage and for rapid saving and loading."}),"\n",(0,r.jsx)(t.p,{children:"PLY files are sometimes used for storing point clouds, however the format is designed to describes a mesh object as a collection of vertices, faces and other elements, along with properties such as color and normal direction that can be attached to these elements."}),"\n",(0,r.jsx)(t.p,{children:"Sources"}),"\n",(0,r.jsx)(t.h2,{id:"columns",children:"Columns"}),"\n",(0,r.jsx)(t.p,{children:"Columns (properties) that might be stored include: color, surface normals, texture coordinates, transparency, range data confidence, and different properties for the front and back of a polygon."}),"\n",(0,r.jsx)(t.h2,{id:"detailed-file-structure",children:"Detailed File Structure"}),"\n",(0,r.jsx)(t.p,{children:"This is the structure of a typical PLY file:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Header"}),"\n",(0,r.jsx)(t.li,{children:"Vertex List"}),"\n",(0,r.jsx)(t.li,{children:"Face List"}),"\n",(0,r.jsx)(t.li,{children:"(lists of other elements)"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"The header is a series of carriage-return terminated lines of text that describe the remainder of the file. The ASCII header contains lines such as"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:'a description of each element type, including the element\'s name (e.g. "edge"),'}),"\n",(0,r.jsx)(t.li,{children:"how many such elements are in the object, and a list of the various properties associated with the element."}),"\n",(0,r.jsx)(t.li,{children:"whether the file is binary or ASCII."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Following the header is one list of elements for each element type, presented in the order described in the header."}),"\n",(0,r.jsx)(t.h2,{id:"example-file",children:"Example File"}),"\n",(0,r.jsx)(t.p,{children:'Below is the complete ASCII description for a cube. The header of a binary version of the same object would differ only in substituting the word "binary_little_endian" or "binary_big_endian" for the word "ascii". The comments in brackets are NOT part of the file, they are annotations to this example. Comments in files are ordinary keyword-identified lines that begin with the word "comment".'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'ply\nformat ascii 1.0           { ascii/binary, format version number }\ncomment made by Greg Turk  { comments keyword specified, like all lines }\ncomment this file is a cube\nelement vertex 8           { define "vertex" element, 8 of them in file }\nproperty float x           { vertex contains float "x" coordinate }\nproperty float y           { y coordinate is also a vertex property }\nproperty float z           { z coordinate, too }\nelement face 6             { there are 6 "face" elements in the file }\nproperty list uchar int vertex_index { "vertex_indices" is a list of ints }\nend_header                 { delimits the end of the header }\n0 0 0                      { start of vertex list }\n0 0 1\n0 1 1\n0 1 0\n1 0 0\n1 0 1\n1 1 1\n1 1 0\n4 0 1 2 3                  { start of face list }\n4 7 6 5 4\n4 0 4 5 1\n4 1 5 6 2\n4 2 6 7 3\n4 3 7 4 0\n'})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var r=n(96540);const i={},o=r.createContext(i);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);