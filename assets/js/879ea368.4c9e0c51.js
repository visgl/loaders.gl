"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[888],{6398:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>n,default:()=>x,frontMatter:()=>i,metadata:()=>c,toc:()=>o});var d=r(74848),t=r(28453);const i={},n="BasisLoader",c={id:"modules/textures/api-reference/basis-loader",title:"BasisLoader",description:'A loader for Basis Universal "supercompressed" GPU textures. Extracts supercompressed textures from the basis or ktx2 container and efficiently "transpiles" them into the specified compressed texture format.',source:"@site/../docs/modules/textures/api-reference/basis-loader.md",sourceDirName:"modules/textures/api-reference",slug:"/modules/textures/api-reference/basis-loader",permalink:"/docs/modules/textures/api-reference/basis-loader",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/textures/api-reference/basis-loader.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TerrainLoader",permalink:"/docs/modules/terrain/api-reference/terrain-loader"},next:{title:"CompressedTextureLoader",permalink:"/docs/modules/textures/api-reference/compressed-texture-loader"}},l={},o=[{value:"Usage",id:"usage",level:2},{value:"Options",id:"options",level:2},{value:"Wasm modules",id:"wasm-modules",level:2},{value:"Compressed Texture Formats",id:"compressed-texture-formats",level:2}];function a(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(s.h1,{id:"basisloader",children:"BasisLoader"}),"\n",(0,d.jsx)("p",{class:"badges",children:(0,d.jsx)("img",{src:"https://img.shields.io/badge/From-v3.0-blue.svg?style=flat-square",alt:"From-v3.0"})}),"\n",(0,d.jsx)(s.p,{children:'A loader for Basis Universal "supercompressed" GPU textures. Extracts supercompressed textures from the basis or ktx2 container and efficiently "transpiles" them into the specified compressed texture format.'}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Loader"}),(0,d.jsx)(s.th,{children:"Characteristic"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"File Format"}),(0,d.jsx)(s.td,{children:(0,d.jsx)(s.a,{href:"https://github.com/BinomialLLC/basis_universal",children:"Basis Universal"})})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"File Extension"}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:".basis"}),", ",(0,d.jsx)(s.code,{children:".ktx2"})]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"File Type"}),(0,d.jsx)(s.td,{children:"Binary"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Data Format"}),(0,d.jsx)(s.td,{children:"Array of compressed image data objects"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Supported APIs"}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"load"}),", ",(0,d.jsx)(s.code,{children:"parse"})]})]})]})]}),"\n",(0,d.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-typescript",children:"import {BasisLoader} from '@loaders.gl/textures';\nimport {load} from '@loaders.gl/core';\n\nconst miplevels = await load(url, BasisLoader, options);\nfor (const compressedImage of miplevels) {\n  ...\n}\n"})}),"\n",(0,d.jsx)(s.h2,{id:"options",children:"Options"}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Option"}),(0,d.jsx)(s.th,{children:"Type"}),(0,d.jsx)(s.th,{children:"Default"}),(0,d.jsx)(s.th,{children:"Description"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"basis.format"})}),(0,d.jsx)(s.td,{children:"String"}),(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"'auto'"})}),(0,d.jsx)(s.td,{children:"Set to one of the supported compressed texture formats."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"basis.containerFormat"})}),(0,d.jsx)(s.td,{children:"String"}),(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"'auto'"})}),(0,d.jsxs)(s.td,{children:["BasisLoader can decode KTX2 container. ",(0,d.jsx)(s.code,{children:"ktx2"})," - decode data as KTX2 container with basis texture in it, ",(0,d.jsx)(s.code,{children:"basis"})," - decode data as unwrapped basis texture, ",(0,d.jsx)(s.code,{children:"auto"})," - detect KTX2 format by magic string"]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"basis.module"})}),(0,d.jsx)(s.td,{children:"String"}),(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"'transcoder'"})}),(0,d.jsxs)(s.td,{children:["Possible values: ",(0,d.jsx)(s.code,{children:"transcoder"})," or ",(0,d.jsx)(s.code,{children:"encoder"}),". Selects wasm module to decode the texture. ",(0,d.jsx)(s.code,{children:"transcoder"})," is smaller but supports only ",(0,d.jsx)(s.code,{children:"BasisFile"}),". ",(0,d.jsx)(s.code,{children:"encoder"})," supports ",(0,d.jsx)(s.code,{children:"BasisFile"})," and ",(0,d.jsx)(s.code,{children:"KTX2File"}),"."]})]})]})]}),"\n",(0,d.jsx)(s.h2,{id:"wasm-modules",children:"Wasm modules"}),"\n",(0,d.jsx)(s.p,{children:"BinomialLCC supplies 2 wasm modules:"}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"basis_transcoder.wasm (~500 kB);"}),"\n",(0,d.jsx)(s.li,{children:"basis_encoder.wasm (~1,6 MB)."}),"\n"]}),"\n",(0,d.jsxs)(s.p,{children:["The modules are forked in the loaders.gl repo story: ",(0,d.jsx)(s.code,{children:"modules/textures/src/libs"}),". The transcoder supports only ",(0,d.jsx)(s.code,{children:".basis"})," extension whereas the encoder supports ",(0,d.jsx)(s.code,{children:".basis"})," and ",(0,d.jsx)(s.code,{children:".ktx2"})," extensions. So the encoder is used to decode ",(0,d.jsx)(s.code,{children:".ktx2"})," files."]}),"\n",(0,d.jsx)(s.p,{children:"The libraries are loaded during runtime from URLs:"}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.a,{href:"https://unpkg.com/@loaders.gl/textures@%7BVERSION%7D/dist/libs/basis_transcoder.wasm",children:"https://unpkg.com/@loaders.gl/textures@{VERSION}/dist/libs/basis_transcoder.wasm"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.a,{href:"https://unpkg.com/@loaders.gl/textures@%7BVERSION%7D/dist/libs/basis_transcoder.js",children:"https://unpkg.com/@loaders.gl/textures@{VERSION}/dist/libs/basis_transcoder.js"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.a,{href:"https://unpkg.com/@loaders.gl/textures@$%7BVERSION%7D/dist/libs/basis_encoder.wasm",children:"https://unpkg.com/@loaders.gl/textures@${VERSION}/dist/libs/basis_encoder.wasm"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.a,{href:"https://unpkg.com/@loaders.gl/textures@$%7BVERSION%7D/dist/libs/basis_encoder.js",children:"https://unpkg.com/@loaders.gl/textures@${VERSION}/dist/libs/basis_encoder.js"})}),"\n"]}),"\n",(0,d.jsx)(s.h2,{id:"compressed-texture-formats",children:"Compressed Texture Formats"}),"\n",(0,d.jsxs)(s.p,{children:["The ",(0,d.jsx)(s.code,{children:"BasisLoader"})," can transpile into the following compressed (and uncompressed) texture formats."]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Format"}),(0,d.jsx)(s.th,{children:"Description"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"etc1"})}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"etc2"})}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bc1"})}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bc3"})}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bc4"})}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bc5"})}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bc7-m6-opaque-only"})}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bc7-m5"})}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"pvrtc1-4-rgb"})}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"pvrtc1-4-rgba"})}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"astc-4x4"})}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"atc-rgb"})}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"atc-rgba-interpolated-alpha"})}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"rgba32"})}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"rgb565"})}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"bgr565"})}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"rgba4444"})}),(0,d.jsx)(s.td,{})]})]})]})]})}function x(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,d.jsx)(s,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}},28453:(e,s,r)=>{r.d(s,{R:()=>n,x:()=>c});var d=r(96540);const t={},i=d.createContext(t);function n(e){const s=d.useContext(i);return d.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:n(e.components),d.createElement(i.Provider,{value:s},e.children)}}}]);