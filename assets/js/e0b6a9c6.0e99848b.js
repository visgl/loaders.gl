"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[2793],{93693:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var t=n(62540),a=n(43023);const o={},r="loadInBatches",i={id:"modules/core/api-reference/load-in-batches",title:"loadInBatches",description:"loadInBatches opens a url as a stream and passes it and options to parseInBatches. See the documentation of load and parseInBatches for more details.",source:"@site/../docs/modules/core/api-reference/load-in-batches.md",sourceDirName:"modules/core/api-reference",slug:"/modules/core/api-reference/load-in-batches",permalink:"/docs/modules/core/api-reference/load-in-batches",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/core/api-reference/load-in-batches.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"load",permalink:"/docs/modules/core/api-reference/load"},next:{title:"parse",permalink:"/docs/modules/core/api-reference/parse"}},l={},d=[{value:"Usage",id:"usage",level:3},{value:"Options",id:"options",level:2}];function c(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"loadinbatches",children:"loadInBatches"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"loadInBatches(url: string | File | ... , loaders: Loader, options?: LoaderOptions]): Promise<AsyncIrerator<unknown>>\nloadInBatches(url: string | File | ... , loaders: Loader[], options?: LoaderOptions]): Promise<AsyncIrerator<unknown>>\nloadInBatches(files: (string | File | ...)[] | FileList, loaders: Loader, options?: LoaderOptions]): Promise<AsyncIterator<unknown>>\nloadInBatches(files: (string | File | ...)[] | FileList, loaders: Loader[], options?: LoaderOptions]): Promise<AsyncIterator<unknown>>\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"loadInBatches"})," opens a ",(0,t.jsx)(s.code,{children:"url"})," as a stream and passes it and options to ",(0,t.jsx)(s.code,{children:"parseInBatches"}),". See the documentation of ",(0,t.jsx)(s.code,{children:"load"})," and ",(0,t.jsx)(s.code,{children:"parseInBatches"})," for more details."]}),"\n",(0,t.jsxs)(s.p,{children:["Starting with ",(0,t.jsx)(s.a,{href:"http://shields.io",children:(0,t.jsx)(s.img,{src:"https://img.shields.io/badge/v2.3-blue.svg?style=flat-square",alt:"Website shields.io"})}),", ",(0,t.jsx)(s.code,{children:"loadInBatches"})," can also load and parse multiple files from a list of ",(0,t.jsx)(s.code,{children:"File"})," objects or urls."]}),"\n",(0,t.jsxs)(s.p,{children:["In this mode, it iterates over the supplied files, looking for valid loader matches, ignores files that do not match a loader and calls ",(0,t.jsx)(s.code,{children:"parseInBatches"})," on each valid file/loader combination, returning an array of async batch iterators."]}),"\n",(0,t.jsxs)(s.p,{children:["More importantly, when called with multiple files, ",(0,t.jsx)(s.code,{children:"loadInBatches"})," makes all the supplied files avialable to all loaders (enabling multi-file loaders such as the ShapefileLoader to access multiple files)."]}),"\n",(0,t.jsx)(s.h3,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"const iteratorPromises = await loadInBatches([file1, file2], OBJLoader);\nfor await (const iterator of iteratorPromises) {\n  for await (const batch of iterator) {\n    // Just the one batch...\n    t.equal(batch.mode, 4, 'mode is TRIANGLES (4)');\n  }\n}\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"import {fetchFile, parseFilesInBatches} from '@loaders.gl/core';\nimport {ShapefileLoader} from '@loaders.gl/shapefile';\n\nconst batchIterators = await loadFilesInBatches([shpFile, dbfFile, projFile], ShapefileLoader));\nfor (const batchIterator of batchIterators) {\n  // `batchIterator` represents the the output of `parseInBatches` on one of the files\n  for await (const batch of batchIterator) {\n    switch (batch.batchType) {\n      case 'metadata':\n        console.log(batch.metadata);\n        break;\n      default:\n        processShapefile(batch);\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(s.p,{children:"Loads data in batches from a stream, releasing each batch to the application while the stream is still being read."}),"\n",(0,t.jsxs)(s.p,{children:["Parses data with the selected ",(0,t.jsx)(s.em,{children:"loader object"}),". An array of ",(0,t.jsx)(s.code,{children:"loaders"})," can be provided, in which case an attempt will be made to autodetect which loader is appropriate for the file (using url extension and header matching)."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"files"}),": loaded data or an object that allows data to be loaded. Plese refer to the table below for valid types."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"loaders"}),": can be a single loader or an array of loaders. If ommitted, will use the list of registered loaders (see ",(0,t.jsx)(s.code,{children:"registerLoaders"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"options"}),": see ",(0,t.jsx)(s.a,{href:"./loader-options",children:(0,t.jsx)(s.code,{children:"LoaderOptions"})}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Returns:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Returns an async iterator that yields batches of data. The exact format for the batches depends on the ",(0,t.jsx)(s.em,{children:"loader object"})," category."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Notes:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["The ",(0,t.jsx)(s.code,{children:"loaders"})," parameter can also be ommitted, in which case any ",(0,t.jsx)(s.em,{children:"loaders"})," previously registered with ",(0,t.jsx)(s.a,{href:"/docs/modules/core/api-reference/register-loaders",children:(0,t.jsx)(s.code,{children:"registerLoaders"})})," will be used."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"options",children:"Options"}),"\n",(0,t.jsx)(s.p,{children:"A loader object, that can contain a mix of options:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["options specific to ",(0,t.jsx)(s.code,{children:"loadInBatches"}),", see below."]}),"\n",(0,t.jsxs)(s.li,{children:["options defined by the ",(0,t.jsx)(s.code,{children:"parseInBatches"})," and ",(0,t.jsx)(s.code,{children:"parse"})," functions can be specified."]}),"\n",(0,t.jsx)(s.li,{children:"options specific to any loaders can also be specified (in loader specific sub-objects)."}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Please refer to the corresponding documentation page for for ",(0,t.jsx)(s.code,{children:"parse"})," and for each loader for details."]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Option"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Default"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsx)(s.tbody,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"options.ignoreUnknownFiles"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"boolean"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"true"})}),(0,t.jsx)(s.td,{children:"Ignores unknown files if multiple files are provided."})]})})]})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},43023:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>i});var t=n(63696);const a={},o=t.createContext(a);function r(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);