"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[1073],{75216:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var o=s(85893),n=s(11151);const t={},a="selectLoader",l={id:"modules/core/api-reference/select-loader",title:"selectLoader",description:"The selectLoader() and selectLoaderSync() functions will automatically select",source:"@site/../docs/modules/core/api-reference/select-loader.md",sourceDirName:"modules/core/api-reference",slug:"/modules/core/api-reference/select-loader",permalink:"/docs/modules/core/api-reference/select-loader",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/core/api-reference/select-loader.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"parseInBatches",permalink:"/docs/modules/core/api-reference/parse-in-batches"},next:{title:"Loader Options",permalink:"/docs/modules/core/api-reference/set-loader-options"}},i={},d=[{value:"Usage",id:"usage",level:2},{value:"Functions",id:"functions",level:2},{value:"<code>selectLoader(data: Response | ArrayBuffer | String | Blob, ..., loaders?: LoaderWithParser[], options?: object, context?: object): Promise&lt;Loader&gt;</code>",id:"selectloaderdata-response--arraybuffer--string--blob--loaders-loaderwithparser-options-object-context-object-promiseloader",level:3},{value:"<code>selectLoaderSync(data: Response | ArrayBuffer | String | Blob, ..., loaders?: LoaderWithParser[], options?: object, context?: object): Loader</code>",id:"selectloadersyncdata-response--arraybuffer--string--blob--loaders-loaderwithparser-options-object-context-object-loader",level:3},{value:"Supported Formats",id:"supported-formats",level:2},{value:"MIME types",id:"mime-types",level:2},{value:"Remarks",id:"remarks",level:2}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h1,{id:"selectloader",children:"selectLoader"}),"\n",(0,o.jsx)("p",{class:"badges",children:(0,o.jsx)("img",{src:"https://img.shields.io/badge/From-v2.2-blue.svg?style=flat-square",alt:"From-v2.2"})}),"\n",(0,o.jsxs)(r.p,{children:["The ",(0,o.jsx)(r.code,{children:"selectLoader()"})," and ",(0,o.jsx)(r.code,{children:"selectLoaderSync()"})," functions will automatically select\nan appropriate loader for a specific resource. ",(0,o.jsx)(r.code,{children:"selectLoader()"})," is called by the\n",(0,o.jsx)(r.code,{children:"parse()"})," and ",(0,o.jsx)(r.code,{children:"load()"})," functions, but can also be called directly from applications."]}),"\n",(0,o.jsx)(r.p,{children:"Loader selection heuristics are based on:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Filename (or url) extensions"}),"\n",(0,o.jsxs)(r.li,{children:["MIME types (from ",(0,o.jsx)(r.code,{children:"Response"})," ",(0,o.jsx)(r.code,{children:"content-type"})," headers or ",(0,o.jsx)(r.code,{children:"Blob.type"}),"/",(0,o.jsx)(r.code,{children:"File.type"})," fields)"]}),"\n",(0,o.jsx)(r.li,{children:'Initial bytes - for certain inputs, the initial bytes in the supplied data can be compared against known "magic bytes" for various file formats.'}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"loader registry"})," - ",(0,o.jsx)(r.code,{children:"selectLoader()"})," and ",(0,o.jsx)(r.code,{children:"selectLoaderSync()"})," are also aware of the\n",(0,o.jsx)(r.a,{href:"/docs/modules/core/api-reference/register-loaders",children:"loader registry"}),".\nThe list of pre-registered loaders will be included in the search for a compatible loader,\nunless ",(0,o.jsx)(r.code,{children:"options.ignoreRegisteredLoaders"})," is ",(0,o.jsx)(r.code,{children:"true"}),"."]}),"\n",(0,o.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(r.p,{children:"Select a loader from a list of provided loaders:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"import {selectLoaderSync} from '@loaders.gl/core';\nimport {ArrowLoader} from '@loaders.gl/arrow';\nimport {CSVLoader} from '@loaders.gl/csv';\n\nselectLoaderSync('filename.csv', [ArrowLoader, CSVLoader]); // => CSVLoader\n"})}),"\n",(0,o.jsx)(r.p,{children:"Select a loader from pre-registered loaders in the loader registry:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"import {registerLoaders, selectLoader} from '@loaders.gl/core';\nimport {ArrowLoader} from '@loaders.gl/arrow';\nimport {CSVLoader} from '@loaders.gl/csv';\n\nregisterLoaders(ArrowLoader, CSVLoader);\n\nawait selectLoader('filename.csv'); // => CSVLoader\n"})}),"\n",(0,o.jsx)(r.p,{children:"Select a loader by specifying MIME type (using unregistered MIME types, see below)"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"const data = new Blob([string], {type: 'application/x.csv'});\nawait selectLoader(blob); // => CSVLoader\n"})}),"\n",(0,o.jsxs)(r.p,{children:["The async ",(0,o.jsx)(r.code,{children:"selectLoader"})," function can identify loaders without extension and mimeType\nby content sniffing ",(0,o.jsx)(r.code,{children:"Blob"})," and ",(0,o.jsx)(r.code,{children:"File"})," objects (useful when user drags and drops files into your application)."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"const data = new Blob(['DRACO...'] /* Binary Draco files start with these characters */]);\nawait selectLoader(blob, DracoLoader); // => DracoLoader\n"})}),"\n",(0,o.jsx)(r.h2,{id:"functions",children:"Functions"}),"\n",(0,o.jsx)(r.h3,{id:"selectloaderdata-response--arraybuffer--string--blob--loaders-loaderwithparser-options-object-context-object-promiseloader",children:(0,o.jsx)(r.code,{children:"selectLoader(data: Response | ArrayBuffer | String | Blob, ..., loaders?: LoaderWithParser[], options?: object, context?: object): Promise<Loader>"})}),"\n",(0,o.jsxs)(r.p,{children:["Selects an appropriate loader for a file from a list of candidate loaders by examining the ",(0,o.jsx)(r.code,{children:"data"})," parameter, looking at URL extension, mimeType ('Content-Type') and/or an initial data chunk."]}),"\n",(0,o.jsx)(r.p,{children:"Parameters:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"data"})," - data to perform autodetection against"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"loaders"})," - can be a single loader or an array of loaders, or null."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"options"})," - See ",(0,o.jsx)(r.a,{href:"./loader-options",children:(0,o.jsx)(r.code,{children:"LoaderOptions"})}),"."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"options.nothrow"}),"=",(0,o.jsx)(r.code,{children:"false"})," - Return null instead of throwing exception if no loader can be found"]}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"Returns:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["A single loader (or ",(0,o.jsx)(r.code,{children:"null"})," if ",(0,o.jsx)(r.code,{children:"options.nothrow"})," was set and no matching loader was found)."]}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"Throws:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["If no matching loader was found, and ",(0,o.jsx)(r.code,{children:"options.nothrow"})," was not set."]}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:["Regarding the ",(0,o.jsx)(r.code,{children:"loaders"})," parameter:"]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"A single loader object will be returned without matching."}),"\n",(0,o.jsxs)(r.li,{children:["a ",(0,o.jsx)(r.code,{children:"null"})," loader list will use the pre-registered list of loaders."]}),"\n",(0,o.jsx)(r.li,{children:"A supplied list of loaders will be searched for a matching loader."}),"\n"]}),"\n",(0,o.jsx)(r.h3,{id:"selectloadersyncdata-response--arraybuffer--string--blob--loaders-loaderwithparser-options-object-context-object-loader",children:(0,o.jsx)(r.code,{children:"selectLoaderSync(data: Response | ArrayBuffer | String | Blob, ..., loaders?: LoaderWithParser[], options?: object, context?: object): Loader"})}),"\n",(0,o.jsx)(r.h2,{id:"supported-formats",children:"Supported Formats"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"strings / non-data urls:"}),"\n",(0,o.jsx)(r.li,{children:"strings / data urls: The mime type will be extracted from the data url prologue (if available)"}),"\n",(0,o.jsxs)(r.li,{children:["fetch ",(0,o.jsx)(r.code,{children:"Response"})," objects: ",(0,o.jsx)(r.code,{children:"url"})," and ",(0,o.jsx)(r.code,{children:"headers.get('Content-Type')"})," fields will be used."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"File"})," and ",(0,o.jsx)(r.code,{children:"Blob"})," objects:"]}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:["Peeking into batched input sources is not supported directly by ",(0,o.jsx)(r.code,{children:"selectLoader"}),":"]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"Response"}),": Avoids requesting initial data to make sure the response body is not marked as used."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"Stream"}),": It is not possible to non-destructively peek into a stream."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"Iterator/AsyncIterator"}),": it is not possible to peek into an iterator."]}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"Instead use helpers to get access to initialContents and pass it in separately."}),"\n",(0,o.jsx)(r.h2,{id:"mime-types",children:"MIME types"}),"\n",(0,o.jsxs)(r.p,{children:["If the standard MIME types for each format are not precise enough, loaders.gl also supports ",(0,o.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Media_type#Unregistered_tree",children:"unregistered"})," MIME types. Each loader will match the ",(0,o.jsx)(r.code,{children:"application/x.<id>"})," where the ",(0,o.jsx)(r.code,{children:"<id>"})," is the documented ",(0,o.jsx)(r.code,{children:"id"})," of the loader, e.g. ",(0,o.jsx)(r.code,{children:"application/x.ply"}),"/",(0,o.jsx)(r.code,{children:"application/x.draco"}),"/etc ..."]}),"\n",(0,o.jsx)(r.h2,{id:"remarks",children:"Remarks"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"File extensions - An attempt will be made to extract a file extension by stripping away query parameters and base path before matching against known loader extensions."}),"\n",(0,o.jsx)(r.li,{children:"Stream autodetection - Currently not well supported."}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},11151:(e,r,s)=>{s.d(r,{Z:()=>l,a:()=>a});var o=s(67294);const n={},t=o.createContext(n);function a(e){const r=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),o.createElement(t.Provider,{value:r},e.children)}}}]);