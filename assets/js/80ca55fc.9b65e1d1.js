"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[8252],{48656:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});var s=n(62540),i=n(43023);const l={},a="Table",r={id:"modules/schema/api-reference/table",title:"Table",description:"loaders.gl defines a number of table types.",source:"@site/../docs/modules/schema/api-reference/table.md",sourceDirName:"modules/schema/api-reference",slug:"/modules/schema/api-reference/table",permalink:"/docs/modules/schema/api-reference/table",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/modules/schema/api-reference/table.md",tags:[],version:"current",frontMatter:{}},c={},o=[{value:"Table Schemas",id:"table-schemas",level:2},{value:"Table Utilities",id:"table-utilities",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"table",children:"Table"})}),"\n",(0,s.jsx)(t.p,{children:"loaders.gl defines a number of table types."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"ObjectRowTable"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"ArrayRowTable"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"GeoJSONTable"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"ColumnarTable"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"ArrowTable"})}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["These all have a ",(0,s.jsx)(t.code,{children:"shape"})," field on the top level."]}),"\n",(0,s.jsx)(t.p,{children:'(If you are an advanced TypeScript programmer, you will appreciate that this lets typescript treat table types as a "discriminated union", meaning that once the type has been checked in an if or switch statement, the typing of the table is implied).'}),"\n",(0,s.jsx)(t.h2,{id:"table-schemas",children:"Table Schemas"}),"\n",(0,s.jsxs)(t.p,{children:["Each table has an optional ",(0,s.jsx)(t.code,{children:"schema"})," field. If it is present, it contains a list of fields (name, type and metadata for each field), as well as metadata for the table itself."]}),"\n",(0,s.jsx)(t.p,{children:"There are also utilities for deducing schemas."}),"\n",(0,s.jsx)(t.h2,{id:"table-utilities",children:"Table Utilities"}),"\n",(0,s.jsx)(t.p,{children:"A set of utilities are provided to work with tables independently of which of the supported representations they are in."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"`tableLength``"}),"\n",(0,s.jsx)(t.li,{children:"..."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},43023:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(63696);const i={},l=s.createContext(i);function a(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);