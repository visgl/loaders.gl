"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[5739],{813:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>l});var s=r(62540),i=r(43023);const t={},c="Loader Object",d={id:"specifications/loader-object-format",title:"Loader Object",description:'To be compatible with the parsing/loading functions in @loaders.gl/core such as parse and load, a parser needs to be described by a "loader object" conforming to the following specification.',source:"@site/../docs/specifications/loader-object-format.md",sourceDirName:"specifications",slug:"/specifications/loader-object-format",permalink:"/docs/specifications/loader-object-format",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/specifications/loader-object-format.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Iterator Utilities",permalink:"/docs/modules/core/api-reference/iterator-utilities"},next:{title:"Writer Object",permalink:"/docs/specifications/writer-object-format"}},o={},l=[{value:"Loader Object Format v1.0",id:"loader-object-format-v10",level:2},{value:"Common Fields",id:"common-fields",level:3},{value:"Test Function",id:"test-function",level:3},{value:"Parser Functions",id:"parser-functions",level:3},{value:"Parser Function Signatures",id:"parser-function-signatures",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"loader-object",children:"Loader Object"})}),"\n",(0,s.jsxs)(n.p,{children:["To be compatible with the parsing/loading functions in ",(0,s.jsx)(n.code,{children:"@loaders.gl/core"})," such as ",(0,s.jsx)(n.code,{children:"parse"})," and ",(0,s.jsx)(n.code,{children:"load"}),', a parser needs to be described by a "loader object" conforming to the following specification.']}),"\n",(0,s.jsx)(n.h2,{id:"loader-object-format-v10",children:"Loader Object Format v1.0"}),"\n",(0,s.jsx)(n.h3,{id:"common-fields",children:"Common Fields"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"name"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:"Required"}),(0,s.jsx)(n.td,{children:"Short name of the loader ('OBJ', 'PLY' etc)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"extension"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:"Required"}),(0,s.jsx)(n.td,{children:"Three letter (typically) extension used by files of this format"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"extensions"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String[]"})}),(0,s.jsx)(n.td,{children:"Required"}),(0,s.jsx)(n.td,{children:"Array of file extension strings supported by this loader"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"category"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:"Optional"}),(0,s.jsx)(n.td,{children:"Indicates the type/shape of data"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"parse"})," | ",(0,s.jsx)(n.code,{children:"worker"})]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Function"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"null"})}),(0,s.jsxs)(n.td,{children:["Every non-worker loader should expose a ",(0,s.jsx)(n.code,{children:"parse"})," function."]})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["Note: Only one of ",(0,s.jsx)(n.code,{children:"extension"})," or ",(0,s.jsx)(n.code,{children:"extensions"})," is required. If both are supplied, ",(0,s.jsx)(n.code,{children:"extensions"})," will be used."]}),"\n",(0,s.jsx)(n.h3,{id:"test-function",children:"Test Function"}),"\n",(0,s.jsxs)(n.p,{children:["| Field      | Type       | Default  | Description                                                                                   |\n| ---------- | ---------- | -------- | --------------------------------------------------------------------------------------------- | ------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| ",(0,s.jsx)(n.code,{children:"test"}),"     | ",(0,s.jsx)(n.code,{children:"Function"})," | ",(0,s.jsx)(n.code,{children:"String"})," | ",(0,s.jsx)(n.code,{children:"String[]"}),"                                                                                    | ",(0,s.jsx)(n.code,{children:"null"}),' | Guesses if a binary format file is of this format by examining the first bytes in the file. If the test is specified as a string or array of strings, the initial bytes are expected to be "magic bytes" matching one of the provided strings. |\n| ',(0,s.jsx)(n.code,{children:"testText"})," | ",(0,s.jsx)(n.code,{children:"Function"})," | ",(0,s.jsx)(n.code,{children:"null"}),"   | Guesses if a text format file is of this format by examining the first characters in the file |"]}),"\n",(0,s.jsx)(n.h3,{id:"parser-functions",children:"Parser Functions"}),"\n",(0,s.jsxs)(n.p,{children:["Each (non-worker) loader should define a ",(0,s.jsx)(n.code,{children:"parse"})," function. Additional parsing functions can be exposed depending on the loaders capabilities, to optimize for text parsing, synchronous parsing, streaming parsing, etc:"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parser function field"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"parse"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Function"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"null"})}),(0,s.jsxs)(n.td,{children:["Asynchronously parses binary data (e.g. file contents) asynchronously (",(0,s.jsx)(n.code,{children:"ArrayBuffer"}),")."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"parseInBatches"})," (Experimental)"]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Function"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"null"})}),(0,s.jsxs)(n.td,{children:["Parses binary data chunks (",(0,s.jsx)(n.code,{children:"ArrayBuffer"}),') to output data "batches"']})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"parseSync"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Function"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"null"})}),(0,s.jsxs)(n.td,{children:["Atomically and synchronously parses binary data (e.g. file contents) (",(0,s.jsx)(n.code,{children:"ArrayBuffer"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"parseTextSync"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Function"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"null"})}),(0,s.jsxs)(n.td,{children:["Atomically and synchronously parses a text file (",(0,s.jsx)(n.code,{children:"String"}),")"]})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Synchronous parsers are more flexible as they can support synchronous parsing which can simplify application logic and debugging, and iterator-based parsers are more flexible as they can support batched loading of large data sets in addition to atomic loading."}),"\n",(0,s.jsxs)(n.p,{children:["You are encouraged to provide the most capable parser function you can (e.g. ",(0,s.jsx)(n.code,{children:"parseSync"})," or ",(0,s.jsx)(n.code,{children:"parseToIterator"}),' if possible). Unless you are writing a completely new loader from scratch, the appropriate choice often depends on the capabilities of an existing external "loader" that you are working with.']}),"\n",(0,s.jsx)(n.h3,{id:"parser-function-signatures",children:"Parser Function Signatures"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"async parse(data : ArrayBuffer, options : Object, context : Object) : Object"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"parseSync(data : ArrayBuffer, options : Object, context : Object) : Object"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"parseInBatches(data : AsyncIterator, options : Object, context : Object) : AsyncIterator"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"context"})," parameter will contain the foolowing fields"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"parse"})," or ",(0,s.jsx)(n.code,{children:"parseSync"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"url"})," if available"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},43023:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>d});var s=r(63696);const i={},t=s.createContext(i);function c(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);