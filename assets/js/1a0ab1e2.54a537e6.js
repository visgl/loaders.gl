"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[1982],{41608:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var s=r(62540),n=r(43023);const o={},i="Using Writers",a={id:"developer-guide/using-writers",title:"Using Writers",description:"Writers allow applications to encoded data for a number of the formats supported by loaders.gl.",source:"@site/../docs/developer-guide/using-writers.md",sourceDirName:"developer-guide",slug:"/developer-guide/using-writers",permalink:"/docs/developer-guide/using-writers",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/loaders.gl/tree/master/website/../docs/developer-guide/using-writers.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Using Loaders",permalink:"/docs/developer-guide/using-loaders"},next:{title:"Using Sources",permalink:"/docs/developer-guide/using-sources"}},d={},c=[{value:"Usage",id:"usage",level:2},{value:"Input Data",id:"input-data",level:2}];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"using-writers",children:"Using Writers"})}),"\n",(0,s.jsx)(t.p,{children:"Writers allow applications to encoded data for a number of the formats supported by loaders.gl."}),"\n",(0,s.jsxs)(t.p,{children:["For a detailed specification of the writer object format see the ",(0,s.jsx)(t.a,{href:"/docs/specifications/writer-object-format",children:"API reference"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(t.p,{children:["As an example, to Draco-compress a mesh using the ",(0,s.jsx)(t.code,{children:"DracoWriter"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"import {DracoWriter} from '@loaders.gl/draco';\nimport {encode} from '@loaders.gl/core';\n\nconst mesh = {\n  attributes: {\n    POSITION: {...}\n  }\n};\n\nconst data = await encode(mesh, DracoWriter, options);\n"})}),"\n",(0,s.jsx)(t.h2,{id:"input-data",children:"Input Data"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.em,{children:"Writers"})," accept the same format of data that is produced by the corresponding loaders. This format is documented either in each loader or usually as part of the documentation for that loader category."]}),"\n",(0,s.jsxs)(t.p,{children:["If applications have data in a different format, they will need to first transform the data to the format expected by the ",(0,s.jsx)(t.em,{children:"writer"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},43023:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>a});var s=r(63696);const n={},o=s.createContext(n);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);