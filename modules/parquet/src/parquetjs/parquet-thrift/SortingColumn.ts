// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Copyright (c) 2017 ironSource Ltd.
// Forked from https://github.com/kbajalc/parquets under MIT license

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.2
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import * as thrift from 'thrift';
export interface ISortingColumnArgs {
  column_idx: number;
  descending: boolean;
  nulls_first: boolean;
}
export class SortingColumn {
  public column_idx: number;
  public descending: boolean;
  public nulls_first: boolean;
  constructor(args: ISortingColumnArgs) {
    if (args != null && args.column_idx != null) {
      this.column_idx = args.column_idx;
    } else {
      throw new thrift.Thrift.TProtocolException(
        thrift.Thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[column_idx] is unset!'
      );
    }
    if (args != null && args.descending != null) {
      this.descending = args.descending;
    } else {
      throw new thrift.Thrift.TProtocolException(
        thrift.Thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[descending] is unset!'
      );
    }
    if (args != null && args.nulls_first != null) {
      this.nulls_first = args.nulls_first;
    } else {
      throw new thrift.Thrift.TProtocolException(
        thrift.Thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[nulls_first] is unset!'
      );
    }
  }
  public write(output: thrift.TProtocol): void {
    output.writeStructBegin('SortingColumn');
    if (this.column_idx != null) {
      output.writeFieldBegin('column_idx', thrift.Thrift.Type.I32, 1);
      output.writeI32(this.column_idx);
      output.writeFieldEnd();
    }
    if (this.descending != null) {
      output.writeFieldBegin('descending', thrift.Thrift.Type.BOOL, 2);
      output.writeBool(this.descending);
      output.writeFieldEnd();
    }
    if (this.nulls_first != null) {
      output.writeFieldBegin('nulls_first', thrift.Thrift.Type.BOOL, 3);
      output.writeBool(this.nulls_first);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
  public static read(input: thrift.TProtocol): SortingColumn {
    input.readStructBegin();
    let _args: any = {};
    while (true) {
      const ret: thrift.TField = input.readFieldBegin();
      const fieldType: thrift.Thrift.Type = ret.ftype;
      const fieldId: number = ret.fid;
      if (fieldType === thrift.Thrift.Type.STOP) {
        break;
      }
      switch (fieldId) {
        case 1:
          if (fieldType === thrift.Thrift.Type.I32) {
            const value_1: number = input.readI32();
            _args.column_idx = value_1;
          } else {
            input.skip(fieldType);
          }
          break;
        case 2:
          if (fieldType === thrift.Thrift.Type.BOOL) {
            const value_2: boolean = input.readBool();
            _args.descending = value_2;
          } else {
            input.skip(fieldType);
          }
          break;
        case 3:
          if (fieldType === thrift.Thrift.Type.BOOL) {
            const value_3: boolean = input.readBool();
            _args.nulls_first = value_3;
          } else {
            input.skip(fieldType);
          }
          break;
        default: {
          input.skip(fieldType);
        }
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    if (
      _args.column_idx !== undefined &&
      _args.descending !== undefined &&
      _args.nulls_first !== undefined
    ) {
      return new SortingColumn(_args);
    } else {
      throw new thrift.Thrift.TProtocolException(
        thrift.Thrift.TProtocolExceptionType.UNKNOWN,
        'Unable to read SortingColumn from input'
      );
    }
  }
}
